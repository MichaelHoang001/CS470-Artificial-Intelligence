/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.23.900
  from ../Dropbox/College/5 - CS 470 AI/Frege Eclipse/HW2/src/TicTacToe.fr Do not edit this file!
  Instead, edit the source file and recompile.
*/

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.List;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="../Dropbox/College/5 - CS 470 AI/Frege Eclipse/HW2/src/TicTacToe.fr", time=1458755757764L,
  jmajor=1, jminor=7,
  imps={
    "frege.data.List", "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText",
    "frege.java.util.Regex"
  },
  nmss={
    "List", "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad",
    "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={},
  symts={
    @Meta.SymT(
      offset=51, name=@Meta.QName(kind=0, pack="TicTacToe", base="State"), typ=0, kind=0,
      cons={
        @Meta.SymD(
          offset=59, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="State"), cid=0,
          typ=3,
          fields={
            @Meta.Field(name="pl1", offset=66, sigma=1, strict=false),
            @Meta.Field(name="pl2", offset=80, sigma=1, strict=false),
            @Meta.Field(name="pl1Turn", offset=94, sigma=2, strict=false)
          }
        )
      },
      lnks={},
      funs={
        @Meta.SymV(
          offset=81, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="upd$pl2"), stri="s(su)",
          sig=4, depth=2, rkind=49, doc="update field @pl2@"
        ),
        @Meta.SymV(
          offset=95, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="upd$pl1Turn"), stri="s(su)",
          sig=5, depth=2, rkind=49, doc="update field @pl1Turn@"
        ),
        @Meta.SymV(
          offset=81, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="pl2"), stri="s(s)",
          sig=6, depth=1, rkind=49, doc="access field @pl2@"
        ),
        @Meta.SymV(
          offset=95, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="pl1Turn"), stri="s(s)",
          sig=7, depth=1, rkind=49, doc="access field @pl1Turn@"
        ),
        @Meta.SymV(
          offset=67, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="upd$pl1"), stri="s(su)",
          sig=4, depth=2, rkind=49, doc="update field @pl1@"
        ),
        @Meta.SymV(
          offset=81, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="has$pl2"), stri="s(u)",
          sig=9, depth=1, rkind=49, doc="check if constructor has field @pl2@"
        ),
        @Meta.SymV(
          offset=95, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="has$pl1Turn"), stri="s(u)",
          sig=9, depth=1, rkind=49, doc="check if constructor has field @pl1Turn@"
        ),
        @Meta.SymV(
          offset=81, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="chg$pl2"), stri="s(ss)",
          sig=11, depth=2, rkind=49, doc="change field @pl2@"
        ),
        @Meta.SymV(
          offset=67, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="has$pl1"), stri="s(u)",
          sig=9, depth=1, rkind=49, doc="check if constructor has field @pl1@"
        ),
        @Meta.SymV(
          offset=67, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="chg$pl1"), stri="s(ss)",
          sig=11, depth=2, rkind=49, doc="change field @pl1@"
        ),
        @Meta.SymV(
          offset=95, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="chg$pl1Turn"), stri="s(ss)",
          sig=13, depth=2, rkind=49, doc="change field @pl1Turn@"
        ),
        @Meta.SymV(
          offset=67, name=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="pl1"), stri="s(s)",
          sig=6, depth=1, rkind=49, doc="access field @pl1@"
        )
      },
      prod=true
    )
  },
  symvs={
    @Meta.SymV(offset=2916, name=@Meta.QName(pack="TicTacToe", base="winLines"), stri="s", sig=14, depth=0, rkind=49),
    @Meta.SymV(offset=592, name=@Meta.QName(pack="TicTacToe", base="startState"), stri="s", sig=0, depth=0, rkind=49),
    @Meta.SymV(offset=3116, name=@Meta.QName(pack="TicTacToe", base="score"), stri="s(u)", sig=15, depth=1, rkind=49),
    @Meta.SymV(
      offset=3431, name=@Meta.QName(pack="TicTacToe", base="revisedscore"), stri="s(u)", sig=15,
      depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=1556, name=@Meta.QName(pack="TicTacToe", base="printBoard"), stri="s(s)", sig=16,
      depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=1317, name=@Meta.QName(pack="TicTacToe", base="playTurn"), stri="s(su)", sig=18,
      depth=2, rkind=49
    ),
    @Meta.SymV(offset=114, name=@Meta.QName(pack="TicTacToe", base="main"), stri="u", sig=19, depth=0, rkind=36),
    @Meta.SymV(
      offset=2769, name=@Meta.QName(pack="TicTacToe", base="isWinner"), stri="s(u)", sig=20,
      depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=652, name=@Meta.QName(pack="TicTacToe", base="humanMove"), stri="s(u)", sig=21,
      depth=1, rkind=177
    ),
    @Meta.SymV(offset=3007, name=@Meta.QName(pack="TicTacToe", base="genMoves"), stri="s(u)", sig=6, depth=1, rkind=49),
    @Meta.SymV(
      offset=2061, name=@Meta.QName(pack="TicTacToe", base="findBestMove"), stri="s(uu)", sig=22,
      depth=2, rkind=49
    ),
    @Meta.SymV(
      offset=1044, name=@Meta.QName(pack="TicTacToe", base="computerMove"), stri="s(u)", sig=21,
      depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=2210, name=@Meta.QName(pack="TicTacToe", base="aStar'"), stri="s(uussu)", sig=25,
      depth=5, rkind=49
    )
  },
  symls={
    @Meta.SymL(
      offset=59, name=@Meta.QName(pack="TicTacToe", base="State"),
      alias=@Meta.QName(kind=2, pack="TicTacToe", base="State", member="State")
    )
  },
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="TicTacToe", base="State")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=0, suba=1, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(suba=0, tvar="a"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=6, subb=3), @Meta.Tau(kind=0, suba=7, subb=3), @Meta.Tau(kind=0, suba=6, subb=4),
    @Meta.Tau(kind=0, suba=9, subb=4), @Meta.Tau(kind=0, suba=1, subb=3),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=12, subb=13),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=15, subb=16),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}),
    @Meta.Tau(kind=0, suba=17, subb=18), @Meta.Tau(kind=0, suba=17, subb=0), @Meta.Tau(kind=0, suba=1, subb=5)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(rhofun=false, rhotau=4),
    @Meta.Rho(sigma=2, rhotau=0), @Meta.Rho(sigma=1, rhotau=3), @Meta.Rho(sigma=1, rhotau=4),
    @Meta.Rho(sigma=1, rhotau=0), @Meta.Rho(sigma=0, rhotau=6), @Meta.Rho(sigma=0, rhotau=3),
    @Meta.Rho(sigma=0, rhotau=1), @Meta.Rho(sigma=0, rhotau=2), @Meta.Rho(rhofun=false, rhotau=5),
    @Meta.Rho(sigma=8, rhotau=2), @Meta.Rho(rhofun=false, rhotau=8), @Meta.Rho(sigma=10, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=14), @Meta.Rho(rhofun=false, rhotau=10), @Meta.Rho(sigma=12, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=17), @Meta.Rho(rhofun=false, rhotau=11), @Meta.Rho(rhofun=false, rhotau=2),
    @Meta.Rho(sigma=0, rhotau=20), @Meta.Rho(rhofun=false, rhotau=14), @Meta.Rho(sigma=0, rhotau=22),
    @Meta.Rho(sigma=17, rhotau=0), @Meta.Rho(sigma=0, rhotau=24), @Meta.Rho(rhofun=false, rhotau=19),
    @Meta.Rho(sigma=1, rhotau=2), @Meta.Rho(rhofun=false, rhotau=20), @Meta.Rho(sigma=0, rhotau=28),
    @Meta.Rho(sigma=17, rhotau=20), @Meta.Rho(sigma=0, rhotau=30), @Meta.Rho(sigma=8, rhotau=20),
    @Meta.Rho(sigma=8, rhotau=32), @Meta.Rho(rhofun=false, rhotau=21), @Meta.Rho(sigma=8, rhotau=34),
    @Meta.Rho(sigma=17, rhotau=34), @Meta.Rho(sigma=24, rhotau=36), @Meta.Rho(sigma=23, rhotau=37),
    @Meta.Rho(sigma=8, rhotau=38),
    @Meta.Rho(
      cont={@Meta.Context(clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), tau=5)}, sigma=8,
      rhotau=39
    )
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=5), @Meta.Sigma(rho=7),
    @Meta.Sigma(rho=8), @Meta.Sigma(rho=9), @Meta.Sigma(rho=10), @Meta.Sigma(rho=11),
    @Meta.Sigma(bound={"a"}, kinds={0}, rho=12), @Meta.Sigma(rho=13), @Meta.Sigma(rho=15), @Meta.Sigma(rho=16),
    @Meta.Sigma(rho=18), @Meta.Sigma(rho=19), @Meta.Sigma(rho=21), @Meta.Sigma(rho=23), @Meta.Sigma(rho=20),
    @Meta.Sigma(rho=25), @Meta.Sigma(rho=26), @Meta.Sigma(rho=27), @Meta.Sigma(rho=29), @Meta.Sigma(rho=31),
    @Meta.Sigma(rho=33), @Meta.Sigma(rho=35), @Meta.Sigma(bound={"a"}, kinds={0}, rho=40)
  },
  exprs={@Meta.Expr()}, kinds={@Meta.Kind(kind=0)}
)
final public class TicTacToe  {
  



final public static class TState implements frege.runtime.Value, Lazy<TState> {
  private TState(
    final Lazy<PreludeBase.TList<Integer>> arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2, final Lazy<Boolean> arg$3
  ) {
    mem$pl1 = arg$1;
    mem$pl2 = arg$2;
    mem$pl1Turn = arg$3;
  }
  final public int constructor() {
    return 0;
  }
  final public static TState mk(
    final Lazy<PreludeBase.TList<Integer>> arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2, final Lazy<Boolean> arg$3
  ) {
    return new TState(arg$1, arg$2, arg$3);
  }
  final public Lazy<PreludeBase.TList<Integer>> mem$pl1  ;
  final public Lazy<PreludeBase.TList<Integer>> mem$pl2  ;
  final public Lazy<Boolean> mem$pl1Turn  ;
  final public TState call() {
    return this;
  }
  final public Thunk<TState> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public TState simsalabim() {
    return (TState)this;
  }
  final public static TState upd$pl2(final TState arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2) {
    return TState.mk(arg$1.mem$pl1, arg$2, arg$1.mem$pl1Turn);
  }
  final public static TState upd$pl1Turn(final TState arg$1, final Lazy<Boolean> arg$2) {
    return TState.mk(arg$1.mem$pl1, arg$1.mem$pl2, arg$2);
  }
  final public static PreludeBase.TList<Integer> pl2(final TState arg$1) {
    final PreludeBase.TList<Integer> a2$20237 = arg$1.mem$pl2.call();
    return a2$20237;
  }
  final public static boolean pl1Turn(final TState arg$1) {
    final boolean a3$20255 = (boolean)arg$1.mem$pl1Turn.call();
    return a3$20255;
  }
  final public static TState upd$pl1(final TState arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2) {
    return TState.mk(arg$2, arg$1.mem$pl2, arg$1.mem$pl1Turn);
  }
  final public static <𝓐> boolean has$pl2(final Lazy<𝓐> arg$1) {
    return true;
  }
  final public static <𝓐> boolean has$pl1Turn(final Lazy<𝓐> arg$1) {
    return true;
  }
  final public static TState chg$pl2(
    final TState arg$1, final Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>> arg$2
  ) {
    return TState.mk(
              arg$1.mem$pl1,
              Thunk.<PreludeBase.TList<Integer>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<Integer>>>() {
                      public Lazy<PreludeBase.TList<Integer>> call() {
                        return arg$2.apply(arg$1.mem$pl2);
                      }
                    }
                  ),
              arg$1.mem$pl1Turn
            );
  }
  final public static <𝓐> boolean has$pl1(final Lazy<𝓐> arg$1) {
    return true;
  }
  final public static TState chg$pl1(
    final TState arg$1, final Func.U<PreludeBase.TList<Integer>, PreludeBase.TList<Integer>> arg$2
  ) {
    return TState.mk(
              Thunk.<PreludeBase.TList<Integer>>nested(
                    new Lazy.D<Lazy<PreludeBase.TList<Integer>>>() {
                      public Lazy<PreludeBase.TList<Integer>> call() {
                        return arg$2.apply(arg$1.mem$pl1);
                      }
                    }
                  ),
              arg$1.mem$pl2, arg$1.mem$pl1Turn
            );
  }
  final public static TState chg$pl1Turn(final TState arg$1, final Func.U<Boolean, Boolean> arg$2) {
    return TState.mk(
              arg$1.mem$pl1, arg$1.mem$pl2,
              Thunk.<Boolean>nested(
                    new Lazy.D<Lazy<Boolean>>() {
                      public Lazy<Boolean> call() {
                        return arg$2.apply(arg$1.mem$pl1Turn);
                      }
                    }
                  )
            );
  }
  final public static PreludeBase.TList<Integer> pl1(final TState arg$1) {
    final PreludeBase.TList<Integer> a1$20336 = arg$1.mem$pl1.call();
    return a1$20336;
  }
}
final public static PreludeBase.TList<PreludeBase.TList<Integer>> winLines = PreludeBase.TList.DCons.<
  PreludeBase.TList<Integer>
>mk(
      PreludeBase.TList.DCons.<Integer>mk(
            Thunk.<Integer>lazy(0),
            PreludeBase.TList.DCons.<Integer>mk(
                  Thunk.<Integer>lazy(1),
                  PreludeBase.TList.DCons.<Integer>mk(Thunk.<Integer>lazy(2), PreludeBase.TList.DList.<Integer>mk())
                )
          ),
      PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
            PreludeBase.TList.DCons.<Integer>mk(
                  Thunk.<Integer>lazy(3),
                  PreludeBase.TList.DCons.<Integer>mk(
                        Thunk.<Integer>lazy(4),
                        PreludeBase.TList.DCons.<Integer>mk(Thunk.<Integer>lazy(5), PreludeBase.TList.DList.<Integer>mk())
                      )
                ),
            PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                  PreludeBase.TList.DCons.<Integer>mk(
                        Thunk.<Integer>lazy(6),
                        PreludeBase.TList.DCons.<Integer>mk(
                              Thunk.<Integer>lazy(7),
                              PreludeBase.TList.DCons.<Integer>mk(Thunk.<Integer>lazy(8), PreludeBase.TList.DList.<Integer>mk())
                            )
                      ),
                  PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                        PreludeBase.TList.DCons.<Integer>mk(
                              Thunk.<Integer>lazy(0),
                              PreludeBase.TList.DCons.<Integer>mk(
                                    Thunk.<Integer>lazy(3),
                                    PreludeBase.TList.DCons.<Integer>mk(
                                          Thunk.<Integer>lazy(6), PreludeBase.TList.DList.<Integer>mk()
                                        )
                                  )
                            ),
                        PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                              PreludeBase.TList.DCons.<Integer>mk(
                                    Thunk.<Integer>lazy(1),
                                    PreludeBase.TList.DCons.<Integer>mk(
                                          Thunk.<Integer>lazy(4),
                                          PreludeBase.TList.DCons.<Integer>mk(
                                                Thunk.<Integer>lazy(7), PreludeBase.TList.DList.<Integer>mk()
                                              )
                                        )
                                  ),
                              PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                                    PreludeBase.TList.DCons.<Integer>mk(
                                          Thunk.<Integer>lazy(2),
                                          PreludeBase.TList.DCons.<Integer>mk(
                                                Thunk.<Integer>lazy(5),
                                                PreludeBase.TList.DCons.<Integer>mk(
                                                      Thunk.<Integer>lazy(8), PreludeBase.TList.DList.<Integer>mk()
                                                    )
                                              )
                                        ),
                                    PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                                          PreludeBase.TList.DCons.<Integer>mk(
                                                Thunk.<Integer>lazy(0),
                                                PreludeBase.TList.DCons.<Integer>mk(
                                                      Thunk.<Integer>lazy(4),
                                                      PreludeBase.TList.DCons.<Integer>mk(
                                                            Thunk.<Integer>lazy(8), PreludeBase.TList.DList.<Integer>mk()
                                                          )
                                                    )
                                              ),
                                          PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                                                PreludeBase.TList.DCons.<Integer>mk(
                                                      Thunk.<Integer>lazy(2),
                                                      PreludeBase.TList.DCons.<Integer>mk(
                                                            Thunk.<Integer>lazy(4),
                                                            PreludeBase.TList.DCons.<Integer>mk(
                                                                  Thunk.<Integer>lazy(6), PreludeBase.TList.DList.<Integer>mk()
                                                                )
                                                          )
                                                    ),
                                                PreludeBase.TList.DList.<PreludeBase.TList<Integer>>mk()
                                              )
                                        )
                                  )
                            )
                      )
                )
          )
    );
final public static TState startState = TState.mk(
      PreludeBase.TList.DList.<Integer>mk(), PreludeBase.TList.DList.<Integer>mk(), Thunk.<Boolean>lazy(true)
    );
final public static int score(final Lazy<TState> arg$1) {
  final class Let$18473  {
    final public boolean isOpen$20423(final Lazy<PreludeBase.TList<Integer>> arg$2, final PreludeBase.TList<Integer> arg$3) {
      return PreludeList.<Integer>all(
                new Func.U.D<Integer, Boolean>() {
                  public Lazy<Boolean> apply(final Lazy<Integer> η$18478) {
                    return Thunk.<Boolean>nested(
                              new Lazy.D<Lazy<Boolean>>() {
                                public Lazy<Boolean> call() {
                                  return PreludeBase.<Boolean, Integer, PreludeBase.TList<Integer>>flip(
                                            new Func.U.D<Integer, Func.U<PreludeBase.TList<Integer>, Boolean>>() {
                                              public Lazy<Func.U<PreludeBase.TList<Integer>, Boolean>> apply(
                                                final Lazy<Integer> η$18477
                                              ) {
                                                return new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
                                                      public Lazy<Boolean> apply(
                                                        final Lazy<PreludeBase.TList<Integer>> η$18480
                                                      ) {
                                                        return Thunk.<Boolean>shared(
                                                                  new Lazy.D<Boolean>() {
                                                                    public Boolean call() {
                                                                      return PreludeList.<
                                                                            Integer
                                                                          >notElem(
                                                                                PreludeBase.IEq_Int.it, η$18477,
                                                                                η$18480
                                                                                .call()
                                                                              );
                                                                    }
                                                                  }
                                                                );
                                                      }
                                                    };
                                              }
                                            },
                                            arg$2, η$18478
                                          );
                                }
                              }
                            );
                  }
                },
                arg$3
              );
    }
    final public int openLines$20424(final Lazy<PreludeBase.TList<Integer>> arg$2) {
      return (int)PreludeBase.<Integer, PreludeBase.TList<PreludeBase.TList<Integer>>>$(
                new Func.U.D<PreludeBase.TList<PreludeBase.TList<Integer>>, Integer>() {
                  public Lazy<Integer> apply(final Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> η$18479) {
                    return Thunk.<Integer>shared(
                              new Lazy.D<Integer>() {
                                public Integer call() {
                                  return PreludeList.IListView_$lbrack$rbrack.<PreludeBase.TList<Integer>>length(
                                            η$18479.call()
                                          );
                                }
                              }
                            );
                  }
                },
                Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>shared(
                      new Lazy.D<PreludeBase.TList<PreludeBase.TList<Integer>>>() {
                        public PreludeBase.TList<PreludeBase.TList<Integer>> call() {
                          return PreludeList.<PreludeBase.TList<Integer>>filter(
                                    new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
                                      public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Integer>> η$18474) {
                                        return Thunk.<Boolean>shared(
                                                  new Lazy.D<Boolean>() {
                                                    public Boolean call() {
                                                      return isOpen$20423(arg$2, η$18474.call());
                                                    }
                                                  }
                                                );
                                      }
                                    },
                                    TicTacToe.winLines
                                  );
                        }
                      }
                    )
              ).call();
    }
  }
  final Let$18473 let$18473 = new Let$18473();
  return let$18473.openLines$20424(
            Thunk.<PreludeBase.TList<Integer>>shared(
                  new Lazy.D<PreludeBase.TList<Integer>>() {
                    public PreludeBase.TList<Integer> call() {
                      return TState.pl2(arg$1.call());
                    }
                  }
                )
          ) - let$18473.openLines$20424(
            Thunk.<PreludeBase.TList<Integer>>shared(
                  new Lazy.D<PreludeBase.TList<Integer>>() {
                    public PreludeBase.TList<Integer> call() {
                      return TState.pl1(arg$1.call());
                    }
                  }
                )
          );
}
final public static String/*<Character>*/ printBoard(final TState arg$1) {
  final class Let$18476  {
    final public String/*<Character>*/ prnt$20260(final Lazy<Integer> arg$2) {
      if (PreludeList.<Integer>elem(PreludeBase.IEq_Int.it, arg$2, TState.pl1(arg$1))) {
        return "X";
      }
      if (PreludeList.<Integer>elem(PreludeBase.IEq_Int.it, arg$2, TState.pl2(arg$1))) {
        return "O";
      }
      assert PreludeBase.otherwise;
      return " ";
    }
  }
  final Let$18476 let$18476 = new Let$18476();
  final Lazy<String/*<Character>*/> hLine$20257 = Thunk.<String/*<Character>*/>lazy("\n+---+---+---+\n");
  return hLine$20257.call() + ("| " + (let$18476.prnt$20260(Thunk.<Integer>lazy(0)) + (" | " + (let$18476
      .prnt$20260(Thunk.<Integer>lazy(1)) + (" | " + (let$18476.prnt$20260(Thunk.<Integer>lazy(2)) + (" |" + (hLine$20257
      .call() + ("| " + (let$18476.prnt$20260(Thunk.<Integer>lazy(3)) + (" | " + (let$18476
      .prnt$20260(Thunk.<Integer>lazy(4)) + (" | " + (let$18476.prnt$20260(Thunk.<Integer>lazy(5)) + (" |" + (hLine$20257
      .call() + ("| " + (let$18476.prnt$20260(Thunk.<Integer>lazy(6)) + (" | " + (let$18476
      .prnt$20260(Thunk.<Integer>lazy(7)) + (" | " + (let$18476.prnt$20260(Thunk.<Integer>lazy(8)) + (" |" + hLine$20257
      .call())))))))))))))))))))))));
}
final public static TState playTurn(final TState arg$1, final Lazy<Integer> arg$2) {
  if (TState.pl1Turn(arg$1)) {
    return TState.mk(
              PreludeBase.TList.DCons.<Integer>mk(
                    arg$2,
                    Thunk.<PreludeBase.TList<Integer>>shared(
                          new Lazy.D<PreludeBase.TList<Integer>>() {
                            public PreludeBase.TList<Integer> call() {
                              return TState.pl1(arg$1);
                            }
                          }
                        )
                  ),
              Thunk.<PreludeBase.TList<Integer>>shared(
                    new Lazy.D<PreludeBase.TList<Integer>>() {
                      public PreludeBase.TList<Integer> call() {
                        return TState.pl2(arg$1);
                      }
                    }
                  ),
              Thunk.<Boolean>lazy(false)
            );
  }
  assert PreludeBase.otherwise;
  return TState.mk(
            Thunk.<PreludeBase.TList<Integer>>shared(
                  new Lazy.D<PreludeBase.TList<Integer>>() {
                    public PreludeBase.TList<Integer> call() {
                      return TState.pl1(arg$1);
                    }
                  }
                ),
            PreludeBase.TList.DCons.<Integer>mk(
                  arg$2,
                  Thunk.<PreludeBase.TList<Integer>>shared(
                        new Lazy.D<PreludeBase.TList<Integer>>() {
                          public PreludeBase.TList<Integer> call() {
                            return TState.pl2(arg$1);
                          }
                        }
                      )
                ),
            Thunk.<Boolean>lazy(true)
          );
}
final public static boolean isWinner(final Lazy<PreludeBase.TList<Integer>> arg$1) {
  final class Let$18648  {
    final public boolean isComplete$20444(final PreludeBase.TList<Integer> arg$2) {
      return PreludeList.<Integer>all(
                new Func.U.D<Integer, Boolean>() {
                  public Lazy<Boolean> apply(final Lazy<Integer> η$18475) {
                    return Thunk.<Boolean>nested(
                              new Lazy.D<Lazy<Boolean>>() {
                                public Lazy<Boolean> call() {
                                  return PreludeBase.<Boolean, Integer, PreludeBase.TList<Integer>>flip(
                                            new Func.U.D<Integer, Func.U<PreludeBase.TList<Integer>, Boolean>>() {
                                              public Lazy<Func.U<PreludeBase.TList<Integer>, Boolean>> apply(
                                                final Lazy<Integer> η$18646
                                              ) {
                                                return new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
                                                      public Lazy<Boolean> apply(
                                                        final Lazy<PreludeBase.TList<Integer>> η$18645
                                                      ) {
                                                        return Thunk.<Boolean>shared(
                                                                  new Lazy.D<Boolean>() {
                                                                    public Boolean call() {
                                                                      return PreludeList.<
                                                                            Integer
                                                                          >elem(
                                                                                PreludeBase.IEq_Int.it, η$18646,
                                                                                η$18645
                                                                                .call()
                                                                              );
                                                                    }
                                                                  }
                                                                );
                                                      }
                                                    };
                                              }
                                            },
                                            arg$1, η$18475
                                          );
                                }
                              }
                            );
                  }
                },
                arg$2
              );
    }
  }
  final Let$18648 let$18648 = new Let$18648();
  return PreludeList.<PreludeBase.TList<Integer>>any(
            new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
              public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Integer>> η$18647) {
                return Thunk.<Boolean>shared(
                          new Lazy.D<Boolean>() {
                            public Boolean call() {
                              return let$18648.isComplete$20444(η$18647.call());
                            }
                          }
                        );
              }
            },
            TicTacToe.winLines
          );
}
final public static int revisedscore(final Lazy<TState> arg$1) {
  final class Let$18644  {
    final public int parse$20430(final Lazy<TState> arg$2) {
      if (
        (boolean)PreludeBase.<Boolean, PreludeBase.TList<Integer>>$(
              new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
                public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Integer>> η$18642) {
                  return Thunk.<Boolean>shared(
                            new Lazy.D<Boolean>() {
                              public Boolean call() {
                                return TicTacToe.isWinner(η$18642);
                              }
                            }
                          );
                }
              },
              Thunk.<PreludeBase.TList<Integer>>shared(
                    new Lazy.D<PreludeBase.TList<Integer>>() {
                      public PreludeBase.TList<Integer> call() {
                        return TState.pl1(arg$2.call());
                      }
                    }
                  )
            ).call()
      ) {
        return - 100;
      }
      if (
        (boolean)PreludeBase.<Boolean, PreludeBase.TList<Integer>>$(
              new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
                public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Integer>> η$18641) {
                  return Thunk.<Boolean>shared(
                            new Lazy.D<Boolean>() {
                              public Boolean call() {
                                return TicTacToe.isWinner(η$18641);
                              }
                            }
                          );
                }
              },
              Thunk.<PreludeBase.TList<Integer>>shared(
                    new Lazy.D<PreludeBase.TList<Integer>>() {
                      public PreludeBase.TList<Integer> call() {
                        return TState.pl2(arg$2.call());
                      }
                    }
                  )
            ).call()
      ) {
        return 100;
      }
      assert PreludeBase.otherwise;
      return TicTacToe.score(arg$2);
    }
  }
  final Let$18644 let$18644 = new Let$18644();
  return let$18644.parse$20430(arg$1);
}
final public static PreludeBase.TList<Integer> genMoves(final Lazy<TState> arg$1) {
  return PreludeList.<Integer>filter(
            new Func.U.D<Integer, Boolean>() {
              public Lazy<Boolean> apply(final Lazy<Integer> η$18643) {
                return Thunk.<Boolean>nested(
                          new Lazy.D<Lazy<Boolean>>() {
                            public Lazy<Boolean> call() {
                              return PreludeBase.<Boolean, Integer, PreludeBase.TList<Integer>>flip(
                                        new Func.U.D<Integer, Func.U<PreludeBase.TList<Integer>, Boolean>>() {
                                          public Lazy<Func.U<PreludeBase.TList<Integer>, Boolean>> apply(
                                            final Lazy<Integer> η$18654
                                          ) {
                                            return new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
                                                  public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Integer>> η$18653) {
                                                    return Thunk.<Boolean>shared(
                                                              new Lazy.D<Boolean>() {
                                                                public Boolean call() {
                                                                  return PreludeList.<
                                                                        Integer
                                                                      >notElem(PreludeBase.IEq_Int.it, η$18654, η$18653.call());
                                                                }
                                                              }
                                                            );
                                                  }
                                                };
                                          }
                                        },
                                        Thunk.<PreludeBase.TList<Integer>>shared(
                                              new Lazy.D<PreludeBase.TList<Integer>>() {
                                                public PreludeBase.TList<Integer> call() {
                                                  return PreludeList.IListMonoid_$lbrack$rbrack.<
                                                        Integer
                                                      >$plus$plus(
                                                            TState.pl1(arg$1.call()),
                                                            Thunk.<PreludeBase.TList<Integer>>shared(
                                                                  new Lazy.D<PreludeBase.TList<
                                                                    Integer
                                                                  >>() {
                                                                    public PreludeBase.TList<
                                                                      Integer
                                                                    > call() {
                                                                      return TState.pl2(
                                                                                arg$1
                                                                                .call()
                                                                              );
                                                                    }
                                                                  }
                                                                )
                                                          );
                                                }
                                              }
                                            ),
                                        η$18643
                                      );
                            }
                          }
                        );
              }
            },
            PreludeBase.IEnum_Int.enumFromTo(0, 8)
          );
}
final public static Func.U<RealWorld, TState> humanMove(final Lazy<TState> arg$1) {
  return PreludeMonad.IMonad_ST.<TState, Short, RealWorld>$gt$gt(
            PreludeBase.<Func.U<RealWorld, Short>, String/*<Character>*/>$(
                  new Func.U.D<String/*<Character>*/, Func.U<RealWorld, Short>>() {
                    public Lazy<Func.U<RealWorld, Short>> apply(final Lazy<String/*<Character>*/> η$18656) {
                      return Thunk.<Func.U<RealWorld, Short>>shared(
                                new Lazy.D<Func.U<RealWorld, Short>>() {
                                  public Func.U<RealWorld, Short> call() {
                                    return Prelude.putStr(η$18656.call());
                                  }
                                }
                              );
                    }
                  },
                  Thunk.<String/*<Character>*/>shared(
                        new Lazy.D<String/*<Character>*/>() {
                          public String/*<Character>*/ call() {
                            return TicTacToe.printBoard(arg$1.call()) + "Your move [0 to 8]: ";
                          }
                        }
                      )
                ).call(),
            Thunk.<Func.U<RealWorld, TState>>shared(
                  new Lazy.D<Func.U<RealWorld, TState>>() {
                    public Func.U<RealWorld, TState> call() {
                      return PreludeMonad.IMonad_ST.<TState, Short, RealWorld>$gt$gt(
                                IO.TFlushable.flush((java.io.Flushable)frege.runtime.Runtime.stdout.get()),
                                Thunk.<Func.U<RealWorld, TState>>shared(
                                      new Lazy.D<Func.U<RealWorld, TState>>() {
                                        public Func.U<RealWorld, TState> call() {
                                          return PreludeBase.TST.<String/*<Character>*/, TState, RealWorld>$gt$gt$eq(
                                                    Prelude.getLine.call(),
                                                    new Func.U.D<String/*<Character>*/, Func.U<RealWorld, TState>>() {
                                                      public Lazy<Func.U<RealWorld, TState>> apply(
                                                        final Lazy<String/*<Character>*/> arg$2
                                                      ) {
                                                        final Lazy<Integer> move$20284 =
                                                        Thunk.<Integer>shared(
                                                              new Lazy.D<Integer>() {
                                                                public Integer call() {
                                                                  return PreludeBase.atoi(
                                                                            arg$2.call()
                                                                          );
                                                                }
                                                              }
                                                            );
                                                        if (
                                                          PreludeList.<Integer>elem(
                                                                PreludeBase.IEq_Int.it, move$20284,
                                                                TicTacToe.genMoves(arg$1)
                                                              )
                                                        ) {
                                                          return PreludeBase.<Func.U<RealWorld, TState>, TState>$(
                                                                    new Func.U.D<TState, Func.U<RealWorld, TState>>() {
                                                                      public Lazy<Func.U<
                                                                        RealWorld, TState
                                                                      >> apply(final Lazy<TState> η$18655) {
                                                                        return Thunk.<
                                                                              Func.U<RealWorld, TState>
                                                                            >shared(
                                                                                  new Lazy.D<Func.U<
                                                                                    RealWorld, TState
                                                                                  >>() {
                                                                                    public Func.U<
                                                                                      RealWorld,
                                                                                      TState
                                                                                    > call() {
                                                                                      return PreludeMonad.IMonad_ST.<
                                                                                            TState,
                                                                                            RealWorld
                                                                                          >pure(
                                                                                                η$18655
                                                                                              );
                                                                                    }
                                                                                  }
                                                                                );
                                                                      }
                                                                    },
                                                                    Thunk.<TState>shared(
                                                                          new Lazy.D<TState>() {
                                                                            public TState call() {
                                                                              return TicTacToe.playTurn(
                                                                                        arg$1
                                                                                        .call(),
                                                                                        move$20284
                                                                                      );
                                                                            }
                                                                          }
                                                                        )
                                                                  );
                                                        }
                                                        else {
                                                          return Thunk.<Func.U<RealWorld, TState>>shared(
                                                                    new Lazy.D<Func.U<
                                                                      RealWorld, TState
                                                                    >>() {
                                                                      public Func.U<RealWorld, TState> call() {
                                                                        return TicTacToe.humanMove(
                                                                                  arg$1
                                                                                );
                                                                      }
                                                                    }
                                                                  );
                                                        }
                                                      }
                                                    }
                                                  );
                                        }
                                      }
                                    )
                              );
                    }
                  }
                )
          );
}
final public static int findBestMove(final Lazy<TState> arg$1, final Lazy<Integer> arg$2) {
  return (int)PreludeBase.<Integer, PreludeBase.TList<Integer>>$(
            new Func.U.D<PreludeBase.TList<Integer>, Integer>() {
              public Lazy<Integer> apply(final Lazy<PreludeBase.TList<Integer>> η$18650) {
                return Thunk.<Integer>shared(
                          new Lazy.D<Integer>() {
                            public Integer call() {
                              return PreludeList.IListView_$lbrack$rbrack.<Integer>head(
                                        η$18650.call()
                                      );
                            }
                          }
                        );
              }
            },
            Thunk.<PreludeBase.TList<Integer>>shared(
                  new Lazy.D<PreludeBase.TList<Integer>>() {
                    public PreludeBase.TList<Integer> call() {
                      return TicTacToe.genMoves(arg$1);
                    }
                  }
                )
          ).call();
}
final public static Func.U<RealWorld, TState> computerMove(final Lazy<TState> arg$1) {
  final Lazy<Integer> move$20262 = Thunk.<Integer>shared(
        new Lazy.D<Integer>() {
          public Integer call() {
            return TicTacToe.findBestMove(arg$1, Thunk.<Integer>lazy(3));
          }
        }
      );
  return PreludeMonad.IMonad_ST.<TState, Short, RealWorld>$gt$gt(
            PreludeBase.<Func.U<RealWorld, Short>, String/*<Character>*/>$(
                  new Func.U.D<String/*<Character>*/, Func.U<RealWorld, Short>>() {
                    public Lazy<Func.U<RealWorld, Short>> apply(final Lazy<String/*<Character>*/> η$18649) {
                      return Thunk.<Func.U<RealWorld, Short>>shared(
                                new Lazy.D<Func.U<RealWorld, Short>>() {
                                  public Func.U<RealWorld, Short> call() {
                                    return Prelude.putStr(η$18649.call());
                                  }
                                }
                              );
                    }
                  },
                  Thunk.<String/*<Character>*/>shared(
                        new Lazy.D<String/*<Character>*/>() {
                          public String/*<Character>*/ call() {
                            return TicTacToe.printBoard(arg$1.call()) + ("My move: " + (String.valueOf(
                                      (int)move$20262.call()
                                    ) + "\n"));
                          }
                        }
                      )
                ).call(),
            Thunk.<Func.U<RealWorld, TState>>shared(
                  new Lazy.D<Func.U<RealWorld, TState>>() {
                    public Func.U<RealWorld, TState> call() {
                      return PreludeMonad.IMonad_ST.<TState, Short, RealWorld>$gt$gt(
                                IO.TFlushable.flush((java.io.Flushable)frege.runtime.Runtime.stdout.get()),
                                Thunk.<Func.U<RealWorld, TState>>nested(
                                      new Lazy.D<Lazy<Func.U<RealWorld, TState>>>() {
                                        public Lazy<Func.U<RealWorld, TState>> call() {
                                          return PreludeBase.<Func.U<RealWorld, TState>, TState>$(
                                                    new Func.U.D<TState, Func.U<RealWorld, TState>>() {
                                                      public Lazy<Func.U<RealWorld, TState>> apply(
                                                        final Lazy<TState> η$18652
                                                      ) {
                                                        return Thunk.<Func.U<RealWorld, TState>>shared(
                                                                  new Lazy.D<Func.U<RealWorld, TState>>() {
                                                                    public Func.U<RealWorld, TState> call() {
                                                                      return PreludeMonad.IMonad_ST.<
                                                                            TState, RealWorld
                                                                          >pure(η$18652);
                                                                    }
                                                                  }
                                                                );
                                                      }
                                                    },
                                                    Thunk.<TState>shared(
                                                          new Lazy.D<TState>() {
                                                            public TState call() {
                                                              return TicTacToe.playTurn(
                                                                        arg$1.call(), move$20262
                                                                      );
                                                            }
                                                          }
                                                        )
                                                  );
                                        }
                                      }
                                    )
                              );
                    }
                  }
                )
          );
}
final public static Lazy<Func.U<RealWorld, Short>> $main = Thunk.<Func.U<RealWorld, Short>>shared(
      new Lazy.D<Func.U<RealWorld, Short>>() {
        public Func.U<RealWorld, Short> call() {
          final class Let$18628  {
            final public Func.U<RealWorld, Short> playTurn$20276(final Lazy<TState> arg$1) {
              if (
                (boolean)PreludeBase.<Boolean, PreludeBase.TList<Integer>>$(
                      new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
                        public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Integer>> η$18651) {
                          return Thunk.<Boolean>shared(
                                    new Lazy.D<Boolean>() {
                                      public Boolean call() {
                                        return TicTacToe.isWinner(η$18651);
                                      }
                                    }
                                  );
                        }
                      },
                      Thunk.<PreludeBase.TList<Integer>>shared(
                            new Lazy.D<PreludeBase.TList<Integer>>() {
                              public PreludeBase.TList<Integer> call() {
                                return TState.pl1(arg$1.call());
                              }
                            }
                          )
                    ).call()
              ) {
                return PreludeBase.<Func.U<RealWorld, Short>, String/*<Character>*/>$(
                          new Func.U.D<String/*<Character>*/, Func.U<RealWorld, Short>>() {
                            public Lazy<Func.U<RealWorld, Short>> apply(final Lazy<String/*<Character>*/> η$18630) {
                              return Thunk.<Func.U<RealWorld, Short>>shared(
                                        new Lazy.D<Func.U<RealWorld, Short>>() {
                                          public Func.U<RealWorld, Short> call() {
                                            return Prelude.putStr(η$18630.call());
                                          }
                                        }
                                      );
                            }
                          },
                          Thunk.<String/*<Character>*/>shared(
                                new Lazy.D<String/*<Character>*/>() {
                                  public String/*<Character>*/ call() {
                                    return TicTacToe.printBoard(arg$1.call()) + "You win!\n";
                                  }
                                }
                              )
                        ).call();
              }
              if (
                (boolean)PreludeBase.<Boolean, PreludeBase.TList<Integer>>$(
                      new Func.U.D<PreludeBase.TList<Integer>, Boolean>() {
                        public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Integer>> η$18629) {
                          return Thunk.<Boolean>shared(
                                    new Lazy.D<Boolean>() {
                                      public Boolean call() {
                                        return TicTacToe.isWinner(η$18629);
                                      }
                                    }
                                  );
                        }
                      },
                      Thunk.<PreludeBase.TList<Integer>>shared(
                            new Lazy.D<PreludeBase.TList<Integer>>() {
                              public PreludeBase.TList<Integer> call() {
                                return TState.pl2(arg$1.call());
                              }
                            }
                          )
                    ).call()
              ) {
                return PreludeBase.<Func.U<RealWorld, Short>, String/*<Character>*/>$(
                          new Func.U.D<String/*<Character>*/, Func.U<RealWorld, Short>>() {
                            public Lazy<Func.U<RealWorld, Short>> apply(final Lazy<String/*<Character>*/> η$18632) {
                              return Thunk.<Func.U<RealWorld, Short>>shared(
                                        new Lazy.D<Func.U<RealWorld, Short>>() {
                                          public Func.U<RealWorld, Short> call() {
                                            return Prelude.putStr(η$18632.call());
                                          }
                                        }
                                      );
                            }
                          },
                          Thunk.<String/*<Character>*/>shared(
                                new Lazy.D<String/*<Character>*/>() {
                                  public String/*<Character>*/ call() {
                                    return TicTacToe.printBoard(arg$1.call()) + "I win!\n";
                                  }
                                }
                              )
                        ).call();
              }
              if (
                PreludeBase.IEq_$lbrack$rbrack.<Integer>$eq$eq(
                      PreludeBase.IEq_Int.it, TicTacToe.genMoves(arg$1), PreludeBase.TList.DList.<Integer>mk()
                    )
              ) {
                return PreludeBase.<Func.U<RealWorld, Short>, String/*<Character>*/>$(
                          new Func.U.D<String/*<Character>*/, Func.U<RealWorld, Short>>() {
                            public Lazy<Func.U<RealWorld, Short>> apply(final Lazy<String/*<Character>*/> η$18631) {
                              return Thunk.<Func.U<RealWorld, Short>>shared(
                                        new Lazy.D<Func.U<RealWorld, Short>>() {
                                          public Func.U<RealWorld, Short> call() {
                                            return Prelude.putStr(η$18631.call());
                                          }
                                        }
                                      );
                            }
                          },
                          Thunk.<String/*<Character>*/>shared(
                                new Lazy.D<String/*<Character>*/>() {
                                  public String/*<Character>*/ call() {
                                    return TicTacToe.printBoard(arg$1.call()) + "It's a tie!\n";
                                  }
                                }
                              )
                        ).call();
              }
              if (TState.pl1Turn(arg$1.call())) {
                return PreludeBase.TST.<TState, Short, RealWorld>$gt$gt$eq(
                          TicTacToe.humanMove(arg$1),
                          new Func.U.D<TState, Func.U<RealWorld, Short>>() {
                            public Lazy<Func.U<RealWorld, Short>> apply(final Lazy<TState> η$18626) {
                              return Thunk.<Func.U<RealWorld, Short>>shared(
                                        new Lazy.D<Func.U<RealWorld, Short>>() {
                                          public Func.U<RealWorld, Short> call() {
                                            return playTurn$20276(η$18626);
                                          }
                                        }
                                      );
                            }
                          }
                        );
              }
              assert PreludeBase.otherwise;
              return PreludeBase.TST.<TState, Short, RealWorld>$gt$gt$eq(
                        TicTacToe.computerMove(arg$1),
                        new Func.U.D<TState, Func.U<RealWorld, Short>>() {
                          public Lazy<Func.U<RealWorld, Short>> apply(final Lazy<TState> η$18625) {
                            return Thunk.<Func.U<RealWorld, Short>>shared(
                                      new Lazy.D<Func.U<RealWorld, Short>>() {
                                        public Func.U<RealWorld, Short> call() {
                                          return playTurn$20276(η$18625);
                                        }
                                      }
                                    );
                          }
                        }
                      );
            }
          }
          final Let$18628 let$18628 = new Let$18628();
          return let$18628.playTurn$20276(TicTacToe.startState);
        }
      }
    );
final public static <𝓐> PreludeBase.TList<𝓐> aStar$tick(
  final PreludeBase.CEq<𝓐> ctx$1, final Lazy<𝓐> arg$1, final Lazy<𝓐> arg$2, final Func.U<𝓐, Func.U<𝓐, Integer>> arg$3,
  final Func.U<𝓐, PreludeBase.TList<𝓐>> arg$4, final Lazy<Integer> arg$5
) {
  final class Let$18674  {
    final public PreludeBase.TList<𝓐> expand$20437(
      PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> arg$6
    ) {
      tailrecursion: while (true) {
        final PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> arg$6f =
        arg$6;
        final PreludeBase.TList.DList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $18627 =
        arg$6f.isList();
        if ($18627 != null) {
          return PreludeBase.TList.DList.<𝓐>mk();
        }
        final PreludeBase.TList.DCons<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $18638 =
        arg$6f.isCons();
        assert $18638 != null;
        final PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>> $18637 = $18638.mem1
        .call();
        final PreludeBase.TList<𝓐> path$20434 = $18637.mem2.call();
        final Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>> newNodes$20436 =
        Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
              new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>() {
                public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> call() {
                  final class Let$18633  {
                    final public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $lc21845$20435(
                      PreludeBase.TList<𝓐> arg$7
                    ) {
                      tailrecursion: while (true) {
                        final PreludeBase.TList<𝓐> arg$7f = arg$7;
                        final PreludeBase.TList.DCons<𝓐> $18639 = arg$7f.isCons();
                        if ($18639 != null) {
                          if (PreludeList.<𝓐>notElem(ctx$1, $18639.mem1, path$20434)) {
                            return PreludeBase.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>$excl$colon(
                                      PreludeBase.TTuple2.<Integer, PreludeBase.TList<𝓐>>mk(
                                            Thunk.<Integer>shared(
                                                  new Lazy.D<Integer>() {
                                                    public Integer call() {
                                                      return PreludeList.IListView_$lbrack$rbrack.<
                                                            𝓐
                                                          >length(path$20434) + (int)arg$3
                                                          .apply($18639.mem1).call().apply(
                                                                arg$2
                                                              ).call();
                                                    }
                                                  }
                                                ),
                                            PreludeBase.TList.DCons.<𝓐>mk($18639.mem1, path$20434)
                                          ),
                                      Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
                                            new Lazy.D<PreludeBase.TList<
                                              PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                            >>() {
                                              public PreludeBase.TList<
                                                PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                              > call() {
                                                return $lc21845$20435($18639.mem2.call());
                                              }
                                            }
                                          )
                                    );
                          }
                          else {
                            arg$7 = $18639.mem2.call();
                            continue tailrecursion;
                          }
                        }
                        final PreludeBase.TList.DList<𝓐> $18634 = arg$7f.isList();
                        assert $18634 != null;
                        return PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk();
                      }
                    }
                  }
                  final Let$18633 let$18633 = new Let$18633();
                  return let$18633.$lc21845$20435(
                            PreludeList.IListSource_$lbrack$rbrack.<𝓐>toList(
                                  PreludeBase.<PreludeBase.TList<𝓐>, 𝓐>$(
                                        arg$4,
                                        Thunk.<𝓐>shared(
                                              new Lazy.D<𝓐>() {
                                                public 𝓐 call() {
                                                  return PreludeList.IListView_$lbrack$rbrack.<
                                                        𝓐
                                                      >head(path$20434);
                                                }
                                              }
                                            )
                                      ).call()
                                )
                          );
                }
              }
            );
        if (
          ctx$1.ƒ$eq$eq(
                Thunk.<𝓐>shared(
                      new Lazy.D<𝓐>() {
                        public 𝓐 call() {
                          return PreludeList.IListView_$lbrack$rbrack.<𝓐>head(path$20434);
                        }
                      }
                    ),
                arg$2
              )
        ) {
          return PreludeList.<𝓐>reverse(path$20434);
        }
        if (PreludeList.IListView_$lbrack$rbrack.<𝓐>length(path$20434) > (int)arg$5.call()) {
          arg$6 = $18638.mem2.call();
          continue tailrecursion;
        }
        assert PreludeBase.otherwise;
        return PreludeBase.<PreludeBase.TList<𝓐>, PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>$(
                  new Func.U.D<
                    PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>, PreludeBase.TList<𝓐>
                  >() {
                    public Lazy<PreludeBase.TList<𝓐>> apply(
                      final Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>> η$18636
                    ) {
                      return Thunk.<PreludeBase.TList<𝓐>>shared(
                                new Lazy.D<PreludeBase.TList<𝓐>>() {
                                  public PreludeBase.TList<𝓐> call() {
                                    return expand$20437(η$18636.call());
                                  }
                                }
                              );
                    }
                  },
                  Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
                        new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>() {
                          public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> call() {
                            return List.<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>sortBy(
                                      PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                                      new Func.U.D<
                                        PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>,
                                        Func.U<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>
                                      >() {
                                        public Lazy<Func.U<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>> apply(
                                          final Lazy<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> η$18635
                                        ) {
                                          return new Func.U.D<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>() {
                                                public Lazy<Short> apply(
                                                  final Lazy<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> η$18678
                                                ) {
                                                  return Thunk.<Short>nested(
                                                            new Lazy.D<Lazy<Short>>() {
                                                              public Lazy<Short> call() {
                                                                return PreludeBase.<
                                                                      Short, Integer,
                                                                      PreludeBase.TTuple2<
                                                                        Integer, PreludeBase.TList<𝓐>
                                                                      >
                                                                    >on(
                                                                          new Func.U.D<
                                                                            Integer, Func.U<Integer, Short>
                                                                          >() {
                                                                            public Lazy<Func.U<
                                                                              Integer, Short
                                                                            >> apply(final Lazy<Integer> η$18677) {
                                                                              return new Func.U.D<
                                                                                    Integer, Short
                                                                                  >() {
                                                                                    public Lazy<Short> apply(
                                                                                      final Lazy<Integer> η$18680
                                                                                    ) {
                                                                                      return Thunk.<
                                                                                            Short
                                                                                          >shared(
                                                                                                new Lazy.D<Short>() {
                                                                                                  public Short call() {
                                                                                                    return PreludeBase.IOrd_Int.compare(
                                                                                                              η$18677,
                                                                                                              η$18680
                                                                                                            );
                                                                                                  }
                                                                                                }
                                                                                              );
                                                                                    }
                                                                                  };
                                                                            }
                                                                          },
                                                                          new Func.U.D<
                                                                            PreludeBase.TTuple2<
                                                                              Integer, PreludeBase.TList<𝓐>
                                                                            >,
                                                                            Integer
                                                                          >() {
                                                                            public Lazy<Integer> apply(
                                                                              final Lazy<PreludeBase.TTuple2<
                                                                                Integer, PreludeBase.TList<𝓐>
                                                                              >> η$18679
                                                                            ) {
                                                                              return Thunk.<
                                                                                    Integer
                                                                                  >shared(
                                                                                        new Lazy.D<Integer>() {
                                                                                          public Integer call() {
                                                                                            return PreludeBase.<
                                                                                                  Integer,
                                                                                                  PreludeBase.TList<
                                                                                                    𝓐
                                                                                                  >
                                                                                                >fst(
                                                                                                      η$18679
                                                                                                      .call()
                                                                                                    );
                                                                                          }
                                                                                        }
                                                                                      );
                                                                            }
                                                                          },
                                                                          η$18635, η$18678
                                                                        );
                                                              }
                                                            }
                                                          );
                                                }
                                              };
                                        }
                                      },
                                      Thunk.<
                                        Kind.U<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>
                                      >shared(
                                            new Lazy.D<Kind.U<
                                              PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                            >>() {
                                              public Kind.U<
                                                PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                              > call() {
                                                return (Kind.U<
                                                      PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                    >)Thunk.<
                                                      PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>
                                                    >shared(
                                                          new Lazy.D<PreludeBase.TList<
                                                            PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                          >>() {
                                                            public PreludeBase.TList<
                                                              PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                            > call() {
                                                              return PreludeList.IListMonoid_$lbrack$rbrack.<
                                                                    PreludeBase.TTuple2<
                                                                      Integer, PreludeBase.TList<𝓐>
                                                                    >
                                                                  >$plus$plus($18638.mem2.call(), newNodes$20436);
                                                            }
                                                          }
                                                        ).call();
                                              }
                                            }
                                          )
                                    );
                          }
                        }
                      )
                ).call();
      }
    }
  }
  final Let$18674 let$18674 = new Let$18674();
  return let$18674.expand$20437(
            PreludeBase.TList.DCons.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk(
                  PreludeBase.TTuple2.<Integer, PreludeBase.TList<𝓐>>mk(
                        arg$3.apply(arg$1).call().apply(arg$2),
                        PreludeBase.TList.DCons.<𝓐>mk(arg$1, PreludeBase.TList.DList.<𝓐>mk())
                      ),
                  PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk()
                )
          );
}

  public static void main(final java.lang.String[] argv) {
    
        PreludeBase.TST.<Short>performUnsafe($main
               .call()
          ).call();

  }
}
