module EightPuzzle where

import Data.List

main = putStrLn $ concat $ map showState8 solution

solution :: [[Int]]
solution = aStar2 [2,8,3,1,6,4,7,0,5] [1,2,3,8,0,4,7,6,5] h'8 genStates8 --default
--solution = aStar2 [8,1,6,7,4,5,3,2,0] [1,2,3,8,0,4,7,6,5] h'8 genStates8 --impossible

aStar2 :: Eq a => a -> a -> (a->a->Int) -> (a->[a]) -> [a]
aStar2 start goal h' genStates = expand [(h' start goal, [start])]
    where expand [] = []
          expand ((score, path):nodes)
            | head path == goal = reverse path
            | otherwise = expand $ sortBy (compare `on` fst) (nodes ++ newNodes)
            where newNodes = [(length path + h' state goal, state:path) |
                              state <- genStates $ head path, state `notElem` path]

aStar3 :: Eq a => a -> a -> (a->a->Int) -> (a->[a]) -> Int -> [a]
aStar3 start goal h' genStates maxDepth = expand [(h' start goal, [start])]
    where expand [] = []
          expand ((score, path):nodes)
            | head path == goal = reverse path
            | length path > maxDepth = expand nodes
            | otherwise = expand $ sortBy (compare `on` fst) (nodes ++ newNodes)
            where newNodes = [(length path + h' state goal, state:path) |
                              state <- genStates $ head path, state `notElem` path]
                             
aStarID :: Eq a => a -> a -> (a->a->Int) -> (a->[a]) -> Int -> [a]
aStarID start goal h' genStates maxDepthID = deepen 0
    where deepen depth
            | depth > maxDepthID = []
            | aStarResult /= [] = aStarResult
            | otherwise = deepen (depth + 1)
            where aStarResult = aStar3 start goal h' genStates depth

h'8 :: [Int] -> [Int] -> Int
h'8 state goal = length $ filter (\(x, y) -> x /= 0 && x /= y) (zip state goal)

genStates8 :: [Int] -> [[Int]]
genStates8 state = map newState $ swapLists!!(length $ takeWhile (!= 0) state)
    where swapLists = [[1,3],[0,2,4],[1,5],[0,4,6],[1,3,5,7],[2,4,8],[3,7],[6,4,8],[5,7]]
          newState pos = map (swap $ state!!pos) state
          swap p n = if n == p then 0 else if n == 0 then p else n 

showState8 :: [Int] -> String
showState8 state = "\n+---+---+---+\n| " 
    ++ piece 0 ++ " | " ++ piece 1 ++ " | " ++ piece 2 ++ " |\n+---+---+---+\n| "
    ++ piece 3 ++ " | " ++ piece 4 ++ " | " ++ piece 5 ++ " |\n+---+---+---+\n| "
    ++ piece 6 ++ " | " ++ piece 7 ++ " | " ++ piece 8 ++ " |\n+---+---+---+\n"  
    where piece pos = if state!!pos == 0 then " " else show $ state!!pos


h'Bottle :: [Char] -> [Char] -> Double
h'Bottle state goal = 0.5*(fromIntegral $ length $ filter (\(x, y) -> x /= y) $ zip state goal)

                    
genStatesBottle :: [Char] -> [[Char]]
genStatesBottle (w:x:y:z:[]) = filter isLegal [x:w:y:z:[], w:y:x:z:[], w:z:y:x:[]]
    where isLegal ('A':xs) = True
          isLegal ('D':xs) = False
          isLegal ( _:xs) = isLegal xs
