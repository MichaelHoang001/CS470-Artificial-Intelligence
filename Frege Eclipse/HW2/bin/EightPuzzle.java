/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.23.900
  from ../Dropbox/College/5 - CS 470 AI/Frege Eclipse/HW2/src/A2.fr Do not edit this file!
  Instead, edit the source file and recompile.
*/

import frege.run7.Func;
import frege.run7.Lazy;
import frege.run7.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.data.List;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="../Dropbox/College/5 - CS 470 AI/Frege Eclipse/HW2/src/A2.fr", time=1458752831363L, jmajor=1,
  jminor=7,
  imps={
    "frege.data.List", "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText",
    "frege.java.util.Regex"
  },
  nmss={
    "List", "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad",
    "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(offset=102, name=@Meta.QName(pack="EightPuzzle", base="solution"), stri="u", sig=0, depth=0, rkind=36),
    @Meta.SymV(
      offset=2162, name=@Meta.QName(pack="EightPuzzle", base="showState8"), stri="s(s)", sig=2,
      depth=1, rkind=49
    ),
    @Meta.SymV(offset=48, name=@Meta.QName(pack="EightPuzzle", base="main"), stri="u", sig=3, depth=0, rkind=36),
    @Meta.SymV(
      offset=2563, name=@Meta.QName(pack="EightPuzzle", base="h'Bottle"), stri="s(uu)", sig=5,
      depth=2, rkind=49
    ),
    @Meta.SymV(offset=1719, name=@Meta.QName(pack="EightPuzzle", base="h'8"), stri="s(uu)", sig=6, depth=2, rkind=49),
    @Meta.SymV(
      offset=2724, name=@Meta.QName(pack="EightPuzzle", base="genStatesBottle"), stri="s(s)",
      sig=7, depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=1832, name=@Meta.QName(pack="EightPuzzle", base="genStates8"), stri="s(s)", sig=8,
      depth=1, rkind=49
    ),
    @Meta.SymV(
      offset=1368, name=@Meta.QName(pack="EightPuzzle", base="aStarID"), stri="s(uusss)", sig=13,
      depth=5, rkind=49
    ),
    @Meta.SymV(
      offset=784, name=@Meta.QName(pack="EightPuzzle", base="aStar3"), stri="s(uussu)", sig=13,
      depth=5, rkind=49
    ),
    @Meta.SymV(
      offset=298, name=@Meta.QName(pack="EightPuzzle", base="aStar2"), stri="s(uuss)", sig=14,
      depth=4, rkind=49
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=0, suba=0, subb=1), @Meta.Tau(kind=0, suba=0, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=4, subb=5),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=7, subb=8),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}),
    @Meta.Tau(kind=0, suba=9, subb=10), @Meta.Tau(kind=0, suba=0, subb=5),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Double")}),
    @Meta.Tau(kind=0, suba=0, subb=12), @Meta.Tau(suba=0, tvar="a"), @Meta.Tau(kind=0, suba=0, subb=15)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(rhofun=false, rhotau=2), @Meta.Rho(rhofun=false, rhotau=6),
    @Meta.Rho(sigma=1, rhotau=2), @Meta.Rho(rhofun=false, rhotau=11), @Meta.Rho(rhofun=false, rhotau=12),
    @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(sigma=4, rhotau=6), @Meta.Rho(sigma=4, rhotau=7),
    @Meta.Rho(rhofun=false, rhotau=1), @Meta.Rho(sigma=1, rhotau=9), @Meta.Rho(sigma=1, rhotau=10),
    @Meta.Rho(rhofun=false, rhotau=14), @Meta.Rho(sigma=4, rhotau=12), @Meta.Rho(sigma=1, rhotau=0),
    @Meta.Rho(rhofun=false, rhotau=15), @Meta.Rho(sigma=9, rhotau=9), @Meta.Rho(sigma=9, rhotau=16),
    @Meta.Rho(rhofun=false, rhotau=16), @Meta.Rho(sigma=9, rhotau=18), @Meta.Rho(sigma=12, rhotau=18),
    @Meta.Rho(sigma=11, rhotau=20), @Meta.Rho(sigma=10, rhotau=21), @Meta.Rho(sigma=9, rhotau=22),
    @Meta.Rho(
      cont={@Meta.Context(clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), tau=15)}, sigma=9,
      rhotau=23
    ),
    @Meta.Rho(sigma=11, rhotau=18), @Meta.Rho(sigma=10, rhotau=25), @Meta.Rho(sigma=9, rhotau=26),
    @Meta.Rho(
      cont={@Meta.Context(clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), tau=15)}, sigma=9,
      rhotau=27
    )
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=3), @Meta.Sigma(rho=4), @Meta.Sigma(rho=5),
    @Meta.Sigma(rho=8), @Meta.Sigma(rho=11), @Meta.Sigma(rho=13), @Meta.Sigma(rho=14), @Meta.Sigma(rho=15),
    @Meta.Sigma(rho=17), @Meta.Sigma(rho=19), @Meta.Sigma(rho=9), @Meta.Sigma(bound={"a"}, kinds={0}, rho=24),
    @Meta.Sigma(bound={"a"}, kinds={0}, rho=28)
  },
  exprs={@Meta.Expr()}, kinds={@Meta.Kind(kind=0)}
)
final public class EightPuzzle  {
  




final public static String/*<Character>*/ showState8(final PreludeBase.TList<Integer> arg$1) {
  final class Let$18437  {
    final public String/*<Character>*/ piece$20278(final int arg$2) {
      if ((int)List.<Integer>$excl$excl(arg$1, arg$2) == 0) {
        return " ";
      }
      else {
        return PreludeBase.<String/*<Character>*/, Integer>$(
                  new Func.U.D<Integer, String/*<Character>*/>() {
                    public Lazy<String/*<Character>*/> apply(final Lazy<Integer> η$18438) {
                      return Thunk.<String/*<Character>*/>shared(
                                new Lazy.D<String/*<Character>*/>() {
                                  public String/*<Character>*/ call() {
                                    return String.valueOf((int)η$18438.call());
                                  }
                                }
                              );
                    }
                  },
                  Thunk.<Integer>shared(
                        new Lazy.D<Integer>() {
                          public Integer call() {
                            return List.<Integer>$excl$excl(arg$1, arg$2);
                          }
                        }
                      )
                ).call();
      }
    }
  }
  final Let$18437 let$18437 = new Let$18437();
  return "\n+---+---+---+\n| " + (let$18437.piece$20278(0) + (" | " + (let$18437.piece$20278(
            1
          ) + (" | " + (let$18437.piece$20278(2) + (" |\n+---+---+---+\n| " + (let$18437
      .piece$20278(3) + (" | " + (let$18437.piece$20278(4) + (" | " + (let$18437.piece$20278(
            5
          ) + (" |\n+---+---+---+\n| " + (let$18437.piece$20278(6) + (" | " + (let$18437
      .piece$20278(7) + (" | " + (let$18437.piece$20278(8) + " |\n+---+---+---+\n")))))))))))))))));
}
final public static double h$tickBottle(
  final Lazy<PreludeBase.TList<Character>> arg$1, final Lazy<PreludeBase.TList<Character>> arg$2
) {
  return 0.5D * (double)PreludeBase.<Double, Integer>$(
            new Func.U.D<Integer, Double>() {
              public Lazy<Double> apply(final Lazy<Integer> η$18440) {
                return Thunk.<Double>shared(
                          new Lazy.D<Double>() {
                            public Double call() {
                              return PreludeBase.IIntegral_Int.<Double>fromIntegral(PreludeBase.IReal_Double.it, η$18440);
                            }
                          }
                        );
              }
            },
            Thunk.<Integer>nested(
                  new Lazy.D<Lazy<Integer>>() {
                    public Lazy<Integer> call() {
                      return PreludeBase.<Integer, PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>>$(
                                new Func.U.D<PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>, Integer>() {
                                  public Lazy<Integer> apply(
                                    final Lazy<PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>> η$18439
                                  ) {
                                    return Thunk.<Integer>shared(
                                              new Lazy.D<Integer>() {
                                                public Integer call() {
                                                  return PreludeList.IListView_$lbrack$rbrack.<
                                                        PreludeBase.TTuple2<Character, Character>
                                                      >length(η$18439.call());
                                                }
                                              }
                                            );
                                  }
                                },
                                Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>>nested(
                                      new Lazy.D<Lazy<PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>>>() {
                                        public Lazy<PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>> call() {
                                          return PreludeBase.<
                                                PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>,
                                                PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>
                                              >$(
                                                    new Func.U.D<
                                                      PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>,
                                                      PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>
                                                    >() {
                                                      public Lazy<PreludeBase.TList<
                                                        PreludeBase.TTuple2<Character, Character>
                                                      >> apply(
                                                        final Lazy<PreludeBase.TList<
                                                          PreludeBase.TTuple2<Character, Character>
                                                        >> η$18434
                                                      ) {
                                                        return Thunk.<
                                                              PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>
                                                            >shared(
                                                                  new Lazy.D<PreludeBase.TList<
                                                                    PreludeBase.TTuple2<
                                                                      Character, Character
                                                                    >
                                                                  >>() {
                                                                    public PreludeBase.TList<
                                                                      PreludeBase.TTuple2<
                                                                        Character, Character
                                                                      >
                                                                    > call() {
                                                                      return PreludeList.<
                                                                            PreludeBase.TTuple2<
                                                                              Character, Character
                                                                            >
                                                                          >filter(
                                                                                new Func.U.D<
                                                                                  PreludeBase.TTuple2<
                                                                                    Character, Character
                                                                                  >,
                                                                                  Boolean
                                                                                >() {
                                                                                  public Lazy<Boolean> apply(
                                                                                    final Lazy<PreludeBase.TTuple2<
                                                                                      Character,
                                                                                      Character
                                                                                    >> arg$4
                                                                                  ) {
                                                                                    final PreludeBase.TTuple2<
                                                                                      Character,
                                                                                      Character
                                                                                    > $18433 =
                                                                                    arg$4
                                                                                    .call();
                                                                                    final char y$20273 =
                                                                                    (char)$18433.mem2
                                                                                    .call();
                                                                                    final char x$20274 =
                                                                                    (char)$18433.mem1
                                                                                    .call();
                                                                                    return Thunk.<
                                                                                          Boolean
                                                                                        >shared(
                                                                                              new Lazy.D<Boolean>() {
                                                                                                public Boolean call() {
                                                                                                  return x$20274 != y$20273;
                                                                                                }
                                                                                              }
                                                                                            );
                                                                                  }
                                                                                },
                                                                                η$18434
                                                                                .call()
                                                                              );
                                                                    }
                                                                  }
                                                                );
                                                      }
                                                    },
                                                    Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Character, Character>>>shared(
                                                          new Lazy.D<PreludeBase.TList<
                                                            PreludeBase.TTuple2<Character, Character>
                                                          >>() {
                                                            public PreludeBase.TList<
                                                              PreludeBase.TTuple2<Character, Character>
                                                            > call() {
                                                              return PreludeList.<Character, Character>zip(
                                                                        arg$1.call(), arg$2.call()
                                                                      );
                                                            }
                                                          }
                                                        )
                                                  );
                                        }
                                      }
                                    )
                              );
                    }
                  }
                )
          ).call();
}
final public static int h$tick8(final Lazy<PreludeBase.TList<Integer>> arg$1, final Lazy<PreludeBase.TList<Integer>> arg$2) {
  return (int)PreludeBase.<Integer, PreludeBase.TList<PreludeBase.TTuple2<Integer, Integer>>>$(
            new Func.U.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, Integer>>, Integer>() {
              public Lazy<Integer> apply(final Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, Integer>>> η$18446) {
                return Thunk.<Integer>shared(
                          new Lazy.D<Integer>() {
                            public Integer call() {
                              return PreludeList.IListView_$lbrack$rbrack.<PreludeBase.TTuple2<Integer, Integer>>length(
                                        η$18446.call()
                                      );
                            }
                          }
                        );
              }
            },
            Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, Integer>>>shared(
                  new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, Integer>>>() {
                    public PreludeBase.TList<PreludeBase.TTuple2<Integer, Integer>> call() {
                      return PreludeList.<PreludeBase.TTuple2<Integer, Integer>>filter(
                                new Func.U.D<PreludeBase.TTuple2<Integer, Integer>, Boolean>() {
                                  public Lazy<Boolean> apply(final Lazy<PreludeBase.TTuple2<Integer, Integer>> arg$3) {
                                    final PreludeBase.TTuple2<Integer, Integer> $18445 =
                                    arg$3.call();
                                    final int y$20227 = (int)$18445.mem2.call();
                                    final int x$20228 = (int)$18445.mem1.call();
                                    return Thunk.<Boolean>shared(
                                              new Lazy.D<Boolean>() {
                                                public Boolean call() {
                                                  return (x$20228 != 0) && (x$20228 != y$20227);
                                                }
                                              }
                                            );
                                  }
                                },
                                PreludeList.<Integer, Integer>zip(arg$1.call(), arg$2.call())
                              );
                    }
                  }
                )
          ).call();
}
final public static PreludeBase.TList<PreludeBase.TList<Character>> genStatesBottle(final PreludeBase.TList<Character> arg$1) {
  final PreludeBase.TList.DCons<Character> $18442 = arg$1.isCons();
  if ($18442 != null) {
    final PreludeBase.TList<Character> $18441 = $18442.mem2.call();
    final PreludeBase.TList.DCons<Character> $18444 = $18441.isCons();
    if ($18444 != null) {
      final PreludeBase.TList<Character> $18443 = $18444.mem2.call();
      final PreludeBase.TList.DCons<Character> $18486 = $18443.isCons();
      if ($18486 != null) {
        final PreludeBase.TList<Character> $18485 = $18486.mem2.call();
        final PreludeBase.TList.DCons<Character> $18488 = $18485.isCons();
        if ($18488 != null) {
          final PreludeBase.TList<Character> $18487 = $18488.mem2.call();
          final PreludeBase.TList.DList<Character> $18482 = $18487.isList();
          if ($18482 != null) {
            final class Let$18495  {
              final public boolean isLegal$20288(PreludeBase.TList<Character> arg$2) {
                tailrecursion: while (true) {
                  final PreludeBase.TList<Character> arg$2f = arg$2;
                  final PreludeBase.TList.DCons<Character> $18481 = arg$2f.isCons();
                  if ($18481 != null) {
                    final char $18484 = (char)$18481.mem1.call();
                    if ('A' == $18484) {
                      return true;
                    }
                  }
                  final PreludeBase.TList.DCons<Character> $18483 = arg$2f.isCons();
                  if ($18483 != null) {
                    final char $18494 = (char)$18483.mem1.call();
                    if ('D' == $18494) {
                      return false;
                    }
                  }
                  final PreludeBase.TList.DCons<Character> $18493 = arg$2f.isCons();
                  if ($18493 != null) {
                    final PreludeBase.TList<Character> xs$20283 = $18493.mem2.call();
                    arg$2 = xs$20283;
                    continue tailrecursion;
                  }
                  throw new frege.runtime.NoMatch("genStatesBottle", 61, arg$2f);
                }
              }
            }
            final Let$18495 let$18495 = new Let$18495();
            return PreludeList.<PreludeBase.TList<Character>>filter(
                      new Func.U.D<PreludeBase.TList<Character>, Boolean>() {
                        public Lazy<Boolean> apply(final Lazy<PreludeBase.TList<Character>> η$18490) {
                          return Thunk.<Boolean>shared(
                                    new Lazy.D<Boolean>() {
                                      public Boolean call() {
                                        return let$18495.isLegal$20288(η$18490.call());
                                      }
                                    }
                                  );
                        }
                      },
                      PreludeBase.TList.DCons.<PreludeBase.TList<Character>>mk(
                            PreludeBase.TList.DCons.<Character>mk(
                                  $18444.mem1,
                                  PreludeBase.TList.DCons.<Character>mk(
                                        $18442.mem1,
                                        PreludeBase.TList.DCons.<Character>mk(
                                              $18486.mem1,
                                              PreludeBase.TList.DCons.<Character>mk(
                                                    $18488.mem1, PreludeBase.TList.DList.<Character>mk()
                                                  )
                                            )
                                      )
                                ),
                            PreludeBase.TList.DCons.<PreludeBase.TList<Character>>mk(
                                  PreludeBase.TList.DCons.<Character>mk(
                                        $18442.mem1,
                                        PreludeBase.TList.DCons.<Character>mk(
                                              $18486.mem1,
                                              PreludeBase.TList.DCons.<Character>mk(
                                                    $18444.mem1,
                                                    PreludeBase.TList.DCons.<Character>mk(
                                                          $18488.mem1, PreludeBase.TList.DList.<Character>mk()
                                                        )
                                                  )
                                            )
                                      ),
                                  PreludeBase.TList.DCons.<PreludeBase.TList<Character>>mk(
                                        PreludeBase.TList.DCons.<Character>mk(
                                              $18442.mem1,
                                              PreludeBase.TList.DCons.<Character>mk(
                                                    $18488.mem1,
                                                    PreludeBase.TList.DCons.<Character>mk(
                                                          $18486.mem1,
                                                          PreludeBase.TList.DCons.<Character>mk(
                                                                $18444.mem1, PreludeBase.TList.DList.<Character>mk()
                                                              )
                                                        )
                                                  )
                                            ),
                                        PreludeBase.TList.DList.<PreludeBase.TList<Character>>mk()
                                      )
                                )
                          )
                    );
          }
        }
      }
    }
  }
  throw new frege.runtime.NoMatch("genStatesBottle", 60, arg$1);
}
final public static PreludeBase.TList<PreludeBase.TList<Integer>> genStates8(final PreludeBase.TList<Integer> arg$1) {
  final class Let$18491  {
    final public int swap$20239(final int arg$2, final int arg$3) {
      if (arg$3 == arg$2) {
        return 0;
      }
      else {
        if (arg$3 == 0) {
          return arg$2;
        }
        else {
          return arg$3;
        }
      }
    }
    final public PreludeBase.TList<Integer> newState$20240(final Lazy<Integer> arg$2) {
      return PreludeList.<Integer, Integer>map(
                PreludeBase.<Func.U<Integer, Integer>, Integer>$(
                      new Func.U.D<Integer, Func.U<Integer, Integer>>() {
                        public Lazy<Func.U<Integer, Integer>> apply(final Lazy<Integer> η$18489) {
                          return new Func.U.D<Integer, Integer>() {
                                public Lazy<Integer> apply(final Lazy<Integer> η$18492) {
                                  return Thunk.<Integer>shared(
                                            new Lazy.D<Integer>() {
                                              public Integer call() {
                                                return swap$20239((int)η$18489.call(), (int)η$18492.call());
                                              }
                                            }
                                          );
                                }
                              };
                        }
                      },
                      Thunk.<Integer>shared(
                            new Lazy.D<Integer>() {
                              public Integer call() {
                                return List.<Integer>$excl$excl(arg$1, (int)arg$2.call());
                              }
                            }
                          )
                    ).call(),
                arg$1
              );
    }
  }
  final Let$18491 let$18491 = new Let$18491();
  return PreludeBase.<PreludeBase.TList<PreludeBase.TList<Integer>>, PreludeBase.TList<Integer>>$(
            new Func.U.D<PreludeBase.TList<Integer>, PreludeBase.TList<PreludeBase.TList<Integer>>>() {
              public Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> apply(final Lazy<PreludeBase.TList<Integer>> η$18470) {
                return Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>shared(
                          new Lazy.D<PreludeBase.TList<PreludeBase.TList<Integer>>>() {
                            public PreludeBase.TList<PreludeBase.TList<Integer>> call() {
                              return PreludeList.<PreludeBase.TList<Integer>, Integer>map(
                                        new Func.U.D<Integer, PreludeBase.TList<Integer>>() {
                                          public Lazy<PreludeBase.TList<Integer>> apply(
                                            final Lazy<Integer> η$18469
                                          ) {
                                            return Thunk.<PreludeBase.TList<Integer>>shared(
                                                      new Lazy.D<PreludeBase.TList<Integer>>() {
                                                        public PreludeBase.TList<Integer> call() {
                                                          return let$18491.newState$20240(
                                                                    η$18469
                                                                  );
                                                        }
                                                      }
                                                    );
                                          }
                                        },
                                        η$18470.call()
                                      );
                            }
                          }
                        );
              }
            },
            Thunk.<PreludeBase.TList<Integer>>shared(
                  new Lazy.D<PreludeBase.TList<Integer>>() {
                    public PreludeBase.TList<Integer> call() {
                      return List.<PreludeBase.TList<Integer>>$excl$excl(
                                PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                                      PreludeBase.TList.DCons.<Integer>mk(
                                            Thunk.<Integer>lazy(1),
                                            PreludeBase.TList.DCons.<Integer>mk(
                                                  Thunk.<Integer>lazy(3), PreludeBase.TList.DList.<Integer>mk()
                                                )
                                          ),
                                      PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                                            PreludeBase.TList.DCons.<Integer>mk(
                                                  Thunk.<Integer>lazy(0),
                                                  PreludeBase.TList.DCons.<Integer>mk(
                                                        Thunk.<Integer>lazy(2),
                                                        PreludeBase.TList.DCons.<Integer>mk(
                                                              Thunk.<Integer>lazy(4), PreludeBase.TList.DList.<Integer>mk()
                                                            )
                                                      )
                                                ),
                                            PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                                                  PreludeBase.TList.DCons.<Integer>mk(
                                                        Thunk.<Integer>lazy(1),
                                                        PreludeBase.TList.DCons.<Integer>mk(
                                                              Thunk.<Integer>lazy(5), PreludeBase.TList.DList.<Integer>mk()
                                                            )
                                                      ),
                                                  PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                                                        PreludeBase.TList.DCons.<Integer>mk(
                                                              Thunk.<Integer>lazy(0),
                                                              PreludeBase.TList.DCons.<
                                                                Integer
                                                              >mk(
                                                                    Thunk.<Integer>lazy(
                                                                          4
                                                                        ),
                                                                    PreludeBase.TList.DCons.<
                                                                      Integer
                                                                    >mk(
                                                                          Thunk.<Integer>lazy(
                                                                                6
                                                                              ),
                                                                          PreludeBase.TList.DList.<
                                                                            Integer
                                                                          >mk()
                                                                        )
                                                                  )
                                                            ),
                                                        PreludeBase.TList.DCons.<PreludeBase.TList<Integer>>mk(
                                                              PreludeBase.TList.DCons.<
                                                                Integer
                                                              >mk(
                                                                    Thunk.<Integer>lazy(
                                                                          1
                                                                        ),
                                                                    PreludeBase.TList.DCons.<
                                                                      Integer
                                                                    >mk(
                                                                          Thunk.<Integer>lazy(
                                                                                3
                                                                              ),
                                                                          PreludeBase.TList.DCons.<
                                                                            Integer
                                                                          >mk(
                                                                                Thunk.<
                                                                                  Integer
                                                                                >lazy(
                                                                                      5
                                                                                    ),
                                                                                PreludeBase.TList.DCons.<
                                                                                  Integer
                                                                                >mk(
                                                                                      Thunk.<
                                                                                        Integer
                                                                                      >lazy(
                                                                                            7
                                                                                          ),
                                                                                      PreludeBase.TList.DList.<
                                                                                        Integer
                                                                                      >mk()
                                                                                    )
                                                                              )
                                                                        )
                                                                  ),
                                                              PreludeBase.TList.DCons.<
                                                                PreludeBase.TList<Integer>
                                                              >mk(
                                                                    PreludeBase.TList.DCons.<
                                                                      Integer
                                                                    >mk(
                                                                          Thunk.<Integer>lazy(
                                                                                2
                                                                              ),
                                                                          PreludeBase.TList.DCons.<
                                                                            Integer
                                                                          >mk(
                                                                                Thunk.<
                                                                                  Integer
                                                                                >lazy(
                                                                                      4
                                                                                    ),
                                                                                PreludeBase.TList.DCons.<
                                                                                  Integer
                                                                                >mk(
                                                                                      Thunk.<
                                                                                        Integer
                                                                                      >lazy(
                                                                                            8
                                                                                          ),
                                                                                      PreludeBase.TList.DList.<
                                                                                        Integer
                                                                                      >mk()
                                                                                    )
                                                                              )
                                                                        ),
                                                                    PreludeBase.TList.DCons.<
                                                                      PreludeBase.TList<
                                                                        Integer
                                                                      >
                                                                    >mk(
                                                                          PreludeBase.TList.DCons.<
                                                                            Integer
                                                                          >mk(
                                                                                Thunk.<
                                                                                  Integer
                                                                                >lazy(
                                                                                      3
                                                                                    ),
                                                                                PreludeBase.TList.DCons.<
                                                                                  Integer
                                                                                >mk(
                                                                                      Thunk.<
                                                                                        Integer
                                                                                      >lazy(
                                                                                            7
                                                                                          ),
                                                                                      PreludeBase.TList.DList.<
                                                                                        Integer
                                                                                      >mk()
                                                                                    )
                                                                              ),
                                                                          PreludeBase.TList.DCons.<
                                                                            PreludeBase.TList<
                                                                              Integer
                                                                            >
                                                                          >mk(
                                                                                PreludeBase.TList.DCons.<
                                                                                  Integer
                                                                                >mk(
                                                                                      Thunk.<
                                                                                        Integer
                                                                                      >lazy(
                                                                                            6
                                                                                          ),
                                                                                      PreludeBase.TList.DCons.<
                                                                                        Integer
                                                                                      >mk(
                                                                                            Thunk.<
                                                                                              Integer
                                                                                            >lazy(
                                                                                                  4
                                                                                                ),
                                                                                            PreludeBase.TList.DCons.<
                                                                                              Integer
                                                                                            >mk(
                                                                                                  Thunk.<
                                                                                                    Integer
                                                                                                  >lazy(
                                                                                                        8
                                                                                                      ),
                                                                                                  PreludeBase.TList.DList.<
                                                                                                    Integer
                                                                                                  >mk()
                                                                                                )
                                                                                          )
                                                                                    ),
                                                                                PreludeBase.TList.DCons.<
                                                                                  PreludeBase.TList<
                                                                                    Integer
                                                                                  >
                                                                                >mk(
                                                                                      PreludeBase.TList.DCons.<
                                                                                        Integer
                                                                                      >mk(
                                                                                            Thunk.<
                                                                                              Integer
                                                                                            >lazy(
                                                                                                  5
                                                                                                ),
                                                                                            PreludeBase.TList.DCons.<
                                                                                              Integer
                                                                                            >mk(
                                                                                                  Thunk.<
                                                                                                    Integer
                                                                                                  >lazy(
                                                                                                        7
                                                                                                      ),
                                                                                                  PreludeBase.TList.DList.<
                                                                                                    Integer
                                                                                                  >mk()
                                                                                                )
                                                                                          ),
                                                                                      PreludeBase.TList.DList.<
                                                                                        PreludeBase.TList<
                                                                                          Integer
                                                                                        >
                                                                                      >mk()
                                                                                    )
                                                                              )
                                                                        )
                                                                  )
                                                            )
                                                      )
                                                )
                                          )
                                    ),
                                (int)PreludeBase.<Integer, PreludeBase.TList<Integer>>$(
                                      new Func.U.D<PreludeBase.TList<Integer>, Integer>() {
                                        public Lazy<Integer> apply(final Lazy<PreludeBase.TList<Integer>> η$18472) {
                                          return Thunk.<Integer>shared(
                                                    new Lazy.D<Integer>() {
                                                      public Integer call() {
                                                        return PreludeList.IListView_$lbrack$rbrack.<
                                                              Integer
                                                            >length(η$18472.call());
                                                      }
                                                    }
                                                  );
                                        }
                                      },
                                      Thunk.<PreludeBase.TList<Integer>>shared(
                                            new Lazy.D<PreludeBase.TList<Integer>>() {
                                              public PreludeBase.TList<Integer> call() {
                                                return PreludeList.<Integer>takeWhile(
                                                          new Func.U.D<Integer, Boolean>() {
                                                            public Lazy<Boolean> apply(
                                                              final Lazy<Integer> η$18471
                                                            ) {
                                                              return Thunk.<Boolean>nested(
                                                                        new Lazy.D<Lazy<Boolean>>() {
                                                                          public Lazy<Boolean> call() {
                                                                            return PreludeBase.<
                                                                                  Boolean, Integer,
                                                                                  Integer
                                                                                >flip(
                                                                                      new Func.U.D<
                                                                                        Integer,
                                                                                        Func.U<
                                                                                          Integer,
                                                                                          Boolean
                                                                                        >
                                                                                      >() {
                                                                                        public Lazy<Func.U<
                                                                                          Integer,
                                                                                          Boolean
                                                                                        >> apply(
                                                                                          final Lazy<Integer> η$18466
                                                                                        ) {
                                                                                          return new Func.U.D<
                                                                                                Integer,
                                                                                                Boolean
                                                                                              >() {
                                                                                                public Lazy<Boolean> apply(
                                                                                                  final Lazy<Integer> η$18465
                                                                                                ) {
                                                                                                  return Thunk.<
                                                                                                        Boolean
                                                                                                      >shared(
                                                                                                            new Lazy.D<Boolean>() {
                                                                                                              public Boolean call() {
                                                                                                                return (int)η$18466
                                                                                                                    .call() != (int)η$18465
                                                                                                                    .call();
                                                                                                              }
                                                                                                            }
                                                                                                          );
                                                                                                }
                                                                                              };
                                                                                        }
                                                                                      },
                                                                                      Thunk.<
                                                                                        Integer
                                                                                      >lazy(
                                                                                            0
                                                                                          ),
                                                                                      η$18471
                                                                                    );
                                                                          }
                                                                        }
                                                                      );
                                                            }
                                                          },
                                                          arg$1
                                                        );
                                              }
                                            }
                                          )
                                    ).call()
                              );
                    }
                  }
                )
          ).call();
}
final public static <𝓐> PreludeBase.TList<𝓐> aStar3(
  final PreludeBase.CEq<𝓐> ctx$1, final Lazy<𝓐> arg$1, final Lazy<𝓐> arg$2, final Func.U<𝓐, Func.U<𝓐, Integer>> arg$3,
  final Func.U<𝓐, PreludeBase.TList<𝓐>> arg$4, final Lazy<Integer> arg$5
) {
  final class Let$18647  {
    final public PreludeBase.TList<𝓐> expand$20332(
      PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> arg$6
    ) {
      tailrecursion: while (true) {
        final PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> arg$6f =
        arg$6;
        final PreludeBase.TList.DList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $18468 =
        arg$6f.isList();
        if ($18468 != null) {
          return PreludeBase.TList.DList.<𝓐>mk();
        }
        final PreludeBase.TList.DCons<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $18467 =
        arg$6f.isCons();
        assert $18467 != null;
        final PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>> $18478 = $18467.mem1
        .call();
        final PreludeBase.TList<𝓐> path$20245 = $18478.mem2.call();
        final Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>> newNodes$20247 =
        Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
              new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>() {
                public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> call() {
                  final class Let$18474  {
                    final public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $lc21842$20242(
                      PreludeBase.TList<𝓐> arg$7
                    ) {
                      tailrecursion: while (true) {
                        final PreludeBase.TList<𝓐> arg$7f = arg$7;
                        final PreludeBase.TList.DCons<𝓐> $18480 = arg$7f.isCons();
                        if ($18480 != null) {
                          if (PreludeList.<𝓐>notElem(ctx$1, $18480.mem1, path$20245)) {
                            return PreludeBase.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>$excl$colon(
                                      PreludeBase.TTuple2.<Integer, PreludeBase.TList<𝓐>>mk(
                                            Thunk.<Integer>shared(
                                                  new Lazy.D<Integer>() {
                                                    public Integer call() {
                                                      return PreludeList.IListView_$lbrack$rbrack.<
                                                            𝓐
                                                          >length(path$20245) + (int)arg$3
                                                          .apply($18480.mem1).call().apply(
                                                                arg$2
                                                              ).call();
                                                    }
                                                  }
                                                ),
                                            PreludeBase.TList.DCons.<𝓐>mk($18480.mem1, path$20245)
                                          ),
                                      Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
                                            new Lazy.D<PreludeBase.TList<
                                              PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                            >>() {
                                              public PreludeBase.TList<
                                                PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                              > call() {
                                                return $lc21842$20242($18480.mem2.call());
                                              }
                                            }
                                          )
                                    );
                          }
                          else {
                            arg$7 = $18480.mem2.call();
                            continue tailrecursion;
                          }
                        }
                        final PreludeBase.TList.DList<𝓐> $18479 = arg$7f.isList();
                        assert $18479 != null;
                        return PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk();
                      }
                    }
                  }
                  final Let$18474 let$18474 = new Let$18474();
                  return let$18474.$lc21842$20242(
                            PreludeList.IListSource_$lbrack$rbrack.<𝓐>toList(
                                  PreludeBase.<PreludeBase.TList<𝓐>, 𝓐>$(
                                        arg$4,
                                        Thunk.<𝓐>shared(
                                              new Lazy.D<𝓐>() {
                                                public 𝓐 call() {
                                                  return PreludeList.IListView_$lbrack$rbrack.<
                                                        𝓐
                                                      >head(path$20245);
                                                }
                                              }
                                            )
                                      ).call()
                                )
                          );
                }
              }
            );
        if (
          ctx$1.ƒ$eq$eq(
                Thunk.<𝓐>shared(
                      new Lazy.D<𝓐>() {
                        public 𝓐 call() {
                          return PreludeList.IListView_$lbrack$rbrack.<𝓐>head(path$20245);
                        }
                      }
                    ),
                arg$2
              )
        ) {
          return PreludeList.<𝓐>reverse(path$20245);
        }
        if (PreludeList.IListView_$lbrack$rbrack.<𝓐>length(path$20245) > (int)arg$5.call()) {
          arg$6 = $18467.mem2.call();
          continue tailrecursion;
        }
        assert PreludeBase.otherwise;
        return PreludeBase.<PreludeBase.TList<𝓐>, PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>$(
                  new Func.U.D<
                    PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>, PreludeBase.TList<𝓐>
                  >() {
                    public Lazy<PreludeBase.TList<𝓐>> apply(
                      final Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>> η$18473
                    ) {
                      return Thunk.<PreludeBase.TList<𝓐>>shared(
                                new Lazy.D<PreludeBase.TList<𝓐>>() {
                                  public PreludeBase.TList<𝓐> call() {
                                    return expand$20332(η$18473.call());
                                  }
                                }
                              );
                    }
                  },
                  Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
                        new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>() {
                          public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> call() {
                            return List.<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>sortBy(
                                      PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                                      new Func.U.D<
                                        PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>,
                                        Func.U<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>
                                      >() {
                                        public Lazy<Func.U<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>> apply(
                                          final Lazy<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> η$18476
                                        ) {
                                          return new Func.U.D<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>() {
                                                public Lazy<Short> apply(
                                                  final Lazy<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> η$18475
                                                ) {
                                                  return Thunk.<Short>nested(
                                                            new Lazy.D<Lazy<Short>>() {
                                                              public Lazy<Short> call() {
                                                                return PreludeBase.<
                                                                      Short, Integer,
                                                                      PreludeBase.TTuple2<
                                                                        Integer, PreludeBase.TList<𝓐>
                                                                      >
                                                                    >on(
                                                                          new Func.U.D<
                                                                            Integer, Func.U<Integer, Short>
                                                                          >() {
                                                                            public Lazy<Func.U<
                                                                              Integer, Short
                                                                            >> apply(final Lazy<Integer> η$18646) {
                                                                              return new Func.U.D<
                                                                                    Integer, Short
                                                                                  >() {
                                                                                    public Lazy<Short> apply(
                                                                                      final Lazy<Integer> η$18645
                                                                                    ) {
                                                                                      return Thunk.<
                                                                                            Short
                                                                                          >shared(
                                                                                                new Lazy.D<Short>() {
                                                                                                  public Short call() {
                                                                                                    return PreludeBase.IOrd_Int.compare(
                                                                                                              η$18646,
                                                                                                              η$18645
                                                                                                            );
                                                                                                  }
                                                                                                }
                                                                                              );
                                                                                    }
                                                                                  };
                                                                            }
                                                                          },
                                                                          new Func.U.D<
                                                                            PreludeBase.TTuple2<
                                                                              Integer, PreludeBase.TList<𝓐>
                                                                            >,
                                                                            Integer
                                                                          >() {
                                                                            public Lazy<Integer> apply(
                                                                              final Lazy<PreludeBase.TTuple2<
                                                                                Integer, PreludeBase.TList<𝓐>
                                                                              >> η$18648
                                                                            ) {
                                                                              return Thunk.<
                                                                                    Integer
                                                                                  >shared(
                                                                                        new Lazy.D<Integer>() {
                                                                                          public Integer call() {
                                                                                            return PreludeBase.<
                                                                                                  Integer,
                                                                                                  PreludeBase.TList<
                                                                                                    𝓐
                                                                                                  >
                                                                                                >fst(
                                                                                                      η$18648
                                                                                                      .call()
                                                                                                    );
                                                                                          }
                                                                                        }
                                                                                      );
                                                                            }
                                                                          },
                                                                          η$18476, η$18475
                                                                        );
                                                              }
                                                            }
                                                          );
                                                }
                                              };
                                        }
                                      },
                                      Thunk.<
                                        Kind.U<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>
                                      >shared(
                                            new Lazy.D<Kind.U<
                                              PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                            >>() {
                                              public Kind.U<
                                                PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                              > call() {
                                                return (Kind.U<
                                                      PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                    >)Thunk.<
                                                      PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>
                                                    >shared(
                                                          new Lazy.D<PreludeBase.TList<
                                                            PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                          >>() {
                                                            public PreludeBase.TList<
                                                              PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                            > call() {
                                                              return PreludeList.IListMonoid_$lbrack$rbrack.<
                                                                    PreludeBase.TTuple2<
                                                                      Integer, PreludeBase.TList<𝓐>
                                                                    >
                                                                  >$plus$plus($18467.mem2.call(), newNodes$20247);
                                                            }
                                                          }
                                                        ).call();
                                              }
                                            }
                                          )
                                    );
                          }
                        }
                      )
                ).call();
      }
    }
  }
  final Let$18647 let$18647 = new Let$18647();
  return let$18647.expand$20332(
            PreludeBase.TList.DCons.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk(
                  PreludeBase.TTuple2.<Integer, PreludeBase.TList<𝓐>>mk(
                        arg$3.apply(arg$1).call().apply(arg$2),
                        PreludeBase.TList.DCons.<𝓐>mk(arg$1, PreludeBase.TList.DList.<𝓐>mk())
                      ),
                  PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk()
                )
          );
}
final public static <𝓐> PreludeBase.TList<𝓐> aStarID(
  final PreludeBase.CEq<𝓐> ctx$1, final Lazy<𝓐> arg$1, final Lazy<𝓐> arg$2, final Func.U<𝓐, Func.U<𝓐, Integer>> arg$3,
  final Func.U<𝓐, PreludeBase.TList<𝓐>> arg$4, final int arg$5
) {
  final class Let$18642  {
    final public PreludeBase.TList<𝓐> deepen$20251(int arg$6) {
      tailrecursion: while (true) {
        final int arg$6f = arg$6;
        final Lazy<PreludeBase.TList<𝓐>> aStarResult$20229 = Thunk.<PreludeBase.TList<𝓐>>shared(
              new Lazy.D<PreludeBase.TList<𝓐>>() {
                public PreludeBase.TList<𝓐> call() {
                  return EightPuzzle.<𝓐>aStar3(ctx$1, arg$1, arg$2, arg$3, arg$4, Thunk.<Integer>lazy(arg$6f));
                }
              }
            );
        if (arg$6f > arg$5) {
          return PreludeBase.TList.DList.<𝓐>mk();
        }
        if (PreludeBase.IEq_$lbrack$rbrack.<𝓐>$excl$eq(ctx$1, aStarResult$20229.call(), PreludeBase.TList.DList.<𝓐>mk())) {
          return aStarResult$20229.call();
        }
        assert PreludeBase.otherwise;
        arg$6 = arg$6f + 1;
        continue tailrecursion;
      }
    }
  }
  final Let$18642 let$18642 = new Let$18642();
  return let$18642.deepen$20251(0);
}
final public static <𝓐> PreludeBase.TList<𝓐> aStar2(
  final PreludeBase.CEq<𝓐> ctx$1, final Lazy<𝓐> arg$1, final Lazy<𝓐> arg$2, final Func.U<𝓐, Func.U<𝓐, Integer>> arg$3,
  final Func.U<𝓐, PreludeBase.TList<𝓐>> arg$4
) {
  final class Let$18629  {
    final public PreludeBase.TList<𝓐> expand$20348(
      final PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> arg$5
    ) {
      final PreludeBase.TList.DList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $18641 =
      arg$5.isList();
      if ($18641 != null) {
        return PreludeBase.TList.DList.<𝓐>mk();
      }
      final PreludeBase.TList.DCons<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $18644 =
      arg$5.isCons();
      assert $18644 != null;
      final PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>> $18643 = $18644.mem1.call();
      final Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>> newNodes$20327 =
      Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
            new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>() {
              public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> call() {
                final class Let$18656  {
                  final public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> $lc21845$20322(
                    PreludeBase.TList<𝓐> arg$6
                  ) {
                    tailrecursion: while (true) {
                      final PreludeBase.TList<𝓐> arg$6f = arg$6;
                      final PreludeBase.TList.DCons<𝓐> $18654 = arg$6f.isCons();
                      if ($18654 != null) {
                        if (PreludeList.<𝓐>notElem(ctx$1, $18654.mem1, $18643.mem2.call())) {
                          return PreludeBase.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>$excl$colon(
                                    PreludeBase.TTuple2.<Integer, PreludeBase.TList<𝓐>>mk(
                                          Thunk.<Integer>shared(
                                                new Lazy.D<Integer>() {
                                                  public Integer call() {
                                                    return PreludeList.IListView_$lbrack$rbrack.<
                                                          𝓐
                                                        >length($18643.mem2.call()) + (int)arg$3
                                                        .apply($18654.mem1).call().apply(
                                                              arg$2
                                                            ).call();
                                                  }
                                                }
                                              ),
                                          PreludeBase.TList.DCons.<𝓐>mk($18654.mem1, $18643.mem2)
                                        ),
                                    Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
                                          new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>() {
                                            public PreludeBase.TList<
                                              PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                            > call() {
                                              return $lc21845$20322($18654.mem2.call());
                                            }
                                          }
                                        )
                                  );
                        }
                        else {
                          arg$6 = $18654.mem2.call();
                          continue tailrecursion;
                        }
                      }
                      final PreludeBase.TList.DList<𝓐> $18653 = arg$6f.isList();
                      assert $18653 != null;
                      return PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk();
                    }
                  }
                }
                final Let$18656 let$18656 = new Let$18656();
                return let$18656.$lc21845$20322(
                          PreludeList.IListSource_$lbrack$rbrack.<𝓐>toList(
                                PreludeBase.<PreludeBase.TList<𝓐>, 𝓐>$(
                                      arg$4,
                                      Thunk.<𝓐>shared(
                                            new Lazy.D<𝓐>() {
                                              public 𝓐 call() {
                                                return PreludeList.IListView_$lbrack$rbrack.<
                                                      𝓐
                                                    >head($18643.mem2.call());
                                              }
                                            }
                                          )
                                    ).call()
                              )
                        );
              }
            }
          );
      if (
        ctx$1.ƒ$eq$eq(
              Thunk.<𝓐>shared(
                    new Lazy.D<𝓐>() {
                      public 𝓐 call() {
                        return PreludeList.IListView_$lbrack$rbrack.<𝓐>head($18643.mem2.call());
                      }
                    }
                  ),
              arg$2
            )
      ) {
        return PreludeList.<𝓐>reverse($18643.mem2.call());
      }
      assert PreludeBase.otherwise;
      return PreludeBase.<PreludeBase.TList<𝓐>, PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>$(
                new Func.U.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>, PreludeBase.TList<𝓐>>() {
                  public Lazy<PreludeBase.TList<𝓐>> apply(
                    final Lazy<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>> η$18655
                  ) {
                    return Thunk.<PreludeBase.TList<𝓐>>shared(
                              new Lazy.D<PreludeBase.TList<𝓐>>() {
                                public PreludeBase.TList<𝓐> call() {
                                  return expand$20348(η$18655.call());
                                }
                              }
                            );
                  }
                },
                Thunk.<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>shared(
                      new Lazy.D<PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>>() {
                        public PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> call() {
                          return List.<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>sortBy(
                                    PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                                    new Func.U.D<
                                      PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>,
                                      Func.U<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>
                                    >() {
                                      public Lazy<Func.U<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>> apply(
                                        final Lazy<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> η$18650
                                      ) {
                                        return new Func.U.D<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>, Short>() {
                                              public Lazy<Short> apply(
                                                final Lazy<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>> η$18649
                                              ) {
                                                return Thunk.<Short>nested(
                                                          new Lazy.D<Lazy<Short>>() {
                                                            public Lazy<Short> call() {
                                                              return PreludeBase.<
                                                                    Short, Integer,
                                                                    PreludeBase.TTuple2<
                                                                      Integer, PreludeBase.TList<𝓐>
                                                                    >
                                                                  >on(
                                                                        new Func.U.D<Integer, Func.U<Integer, Short>>() {
                                                                          public Lazy<Func.U<
                                                                            Integer, Short
                                                                          >> apply(final Lazy<Integer> η$18652) {
                                                                            return new Func.U.D<
                                                                                  Integer, Short
                                                                                >() {
                                                                                  public Lazy<Short> apply(
                                                                                    final Lazy<Integer> η$18651
                                                                                  ) {
                                                                                    return Thunk.<
                                                                                          Short
                                                                                        >shared(
                                                                                              new Lazy.D<Short>() {
                                                                                                public Short call() {
                                                                                                  return PreludeBase.IOrd_Int.compare(
                                                                                                            η$18652,
                                                                                                            η$18651
                                                                                                          );
                                                                                                }
                                                                                              }
                                                                                            );
                                                                                  }
                                                                                };
                                                                          }
                                                                        },
                                                                        new Func.U.D<
                                                                          PreludeBase.TTuple2<
                                                                            Integer, PreludeBase.TList<𝓐>
                                                                          >,
                                                                          Integer
                                                                        >() {
                                                                          public Lazy<Integer> apply(
                                                                            final Lazy<PreludeBase.TTuple2<
                                                                              Integer, PreludeBase.TList<𝓐>
                                                                            >> η$18630
                                                                          ) {
                                                                            return Thunk.<
                                                                                  Integer
                                                                                >shared(
                                                                                      new Lazy.D<Integer>() {
                                                                                        public Integer call() {
                                                                                          return PreludeBase.<
                                                                                                Integer,
                                                                                                PreludeBase.TList<
                                                                                                  𝓐
                                                                                                >
                                                                                              >fst(
                                                                                                    η$18630
                                                                                                    .call()
                                                                                                  );
                                                                                        }
                                                                                      }
                                                                                    );
                                                                          }
                                                                        },
                                                                        η$18650, η$18649
                                                                      );
                                                            }
                                                          }
                                                        );
                                              }
                                            };
                                      }
                                    },
                                    Thunk.<
                                      Kind.U<PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>
                                    >shared(
                                          new Lazy.D<Kind.U<
                                            PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                          >>() {
                                            public Kind.U<
                                              PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                            > call() {
                                              return (Kind.U<
                                                    PreludeBase.TList<?>, PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                  >)Thunk.<
                                                    PreludeBase.TList<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>
                                                  >shared(
                                                        new Lazy.D<PreludeBase.TList<
                                                          PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                        >>() {
                                                          public PreludeBase.TList<
                                                            PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>
                                                          > call() {
                                                            return PreludeList.IListMonoid_$lbrack$rbrack.<
                                                                  PreludeBase.TTuple2<
                                                                    Integer, PreludeBase.TList<𝓐>
                                                                  >
                                                                >$plus$plus($18644.mem2.call(), newNodes$20327);
                                                          }
                                                        }
                                                      ).call();
                                            }
                                          }
                                        )
                                  );
                        }
                      }
                    )
              ).call();
    }
  }
  final Let$18629 let$18629 = new Let$18629();
  return let$18629.expand$20348(
            PreludeBase.TList.DCons.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk(
                  PreludeBase.TTuple2.<Integer, PreludeBase.TList<𝓐>>mk(
                        arg$3.apply(arg$1).call().apply(arg$2),
                        PreludeBase.TList.DCons.<𝓐>mk(arg$1, PreludeBase.TList.DList.<𝓐>mk())
                      ),
                  PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, PreludeBase.TList<𝓐>>>mk()
                )
          );
}
final public static Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> solution = Thunk.<
  PreludeBase.TList<PreludeBase.TList<Integer>>
>shared(
      new Lazy.D<PreludeBase.TList<PreludeBase.TList<Integer>>>() {
        public PreludeBase.TList<PreludeBase.TList<Integer>> call() {
          return EightPuzzle.<PreludeBase.TList<Integer>>aStar2(
                    new PreludeBase.IEq_$lbrack$rbrack<Integer>(PreludeBase.IEq_Int.it),
                    PreludeBase.TList.DCons.<Integer>mk(
                          Thunk.<Integer>lazy(2),
                          PreludeBase.TList.DCons.<Integer>mk(
                                Thunk.<Integer>lazy(8),
                                PreludeBase.TList.DCons.<Integer>mk(
                                      Thunk.<Integer>lazy(3),
                                      PreludeBase.TList.DCons.<Integer>mk(
                                            Thunk.<Integer>lazy(1),
                                            PreludeBase.TList.DCons.<Integer>mk(
                                                  Thunk.<Integer>lazy(6),
                                                  PreludeBase.TList.DCons.<Integer>mk(
                                                        Thunk.<Integer>lazy(4),
                                                        PreludeBase.TList.DCons.<Integer>mk(
                                                              Thunk.<Integer>lazy(7),
                                                              PreludeBase.TList.DCons.<
                                                                Integer
                                                              >mk(
                                                                    Thunk.<Integer>lazy(
                                                                          0
                                                                        ),
                                                                    PreludeBase.TList.DCons.<
                                                                      Integer
                                                                    >mk(
                                                                          Thunk.<Integer>lazy(
                                                                                5
                                                                              ),
                                                                          PreludeBase.TList.DList.<
                                                                            Integer
                                                                          >mk()
                                                                        )
                                                                  )
                                                            )
                                                      )
                                                )
                                          )
                                    )
                              )
                        ),
                    PreludeBase.TList.DCons.<Integer>mk(
                          Thunk.<Integer>lazy(1),
                          PreludeBase.TList.DCons.<Integer>mk(
                                Thunk.<Integer>lazy(2),
                                PreludeBase.TList.DCons.<Integer>mk(
                                      Thunk.<Integer>lazy(3),
                                      PreludeBase.TList.DCons.<Integer>mk(
                                            Thunk.<Integer>lazy(8),
                                            PreludeBase.TList.DCons.<Integer>mk(
                                                  Thunk.<Integer>lazy(0),
                                                  PreludeBase.TList.DCons.<Integer>mk(
                                                        Thunk.<Integer>lazy(4),
                                                        PreludeBase.TList.DCons.<Integer>mk(
                                                              Thunk.<Integer>lazy(7),
                                                              PreludeBase.TList.DCons.<
                                                                Integer
                                                              >mk(
                                                                    Thunk.<Integer>lazy(
                                                                          6
                                                                        ),
                                                                    PreludeBase.TList.DCons.<
                                                                      Integer
                                                                    >mk(
                                                                          Thunk.<Integer>lazy(
                                                                                5
                                                                              ),
                                                                          PreludeBase.TList.DList.<
                                                                            Integer
                                                                          >mk()
                                                                        )
                                                                  )
                                                            )
                                                      )
                                                )
                                          )
                                    )
                              )
                        ),
                    new Func.U.D<PreludeBase.TList<Integer>, Func.U<PreludeBase.TList<Integer>, Integer>>() {
                      public Lazy<Func.U<PreludeBase.TList<Integer>, Integer>> apply(
                        final Lazy<PreludeBase.TList<Integer>> η$18632
                      ) {
                        return new Func.U.D<PreludeBase.TList<Integer>, Integer>() {
                              public Lazy<Integer> apply(final Lazy<PreludeBase.TList<Integer>> η$18631) {
                                return Thunk.<Integer>shared(
                                          new Lazy.D<Integer>() {
                                            public Integer call() {
                                              return EightPuzzle.h$tick8(η$18632, η$18631);
                                            }
                                          }
                                        );
                              }
                            };
                      }
                    },
                    new Func.U.D<PreludeBase.TList<Integer>, PreludeBase.TList<PreludeBase.TList<Integer>>>() {
                      public Lazy<PreludeBase.TList<PreludeBase.TList<Integer>>> apply(
                        final Lazy<PreludeBase.TList<Integer>> η$18626
                      ) {
                        return Thunk.<PreludeBase.TList<PreludeBase.TList<Integer>>>shared(
                                  new Lazy.D<PreludeBase.TList<PreludeBase.TList<Integer>>>() {
                                    public PreludeBase.TList<PreludeBase.TList<Integer>> call() {
                                      return EightPuzzle.genStates8(η$18626.call());
                                    }
                                  }
                                );
                      }
                    }
                  );
        }
      }
    );
final public static Lazy<Func.U<RealWorld, Short>> $main = Thunk.<Func.U<RealWorld, Short>>shared(
      new Lazy.D<Func.U<RealWorld, Short>>() {
        public Func.U<RealWorld, Short> call() {
          return PreludeBase.<Func.U<RealWorld, Short>, String/*<Character>*/>$(
                    new Func.U.D<String/*<Character>*/, Func.U<RealWorld, Short>>() {
                      public Lazy<Func.U<RealWorld, Short>> apply(final Lazy<String/*<Character>*/> η$18625) {
                        return Thunk.<Func.U<RealWorld, Short>>shared(
                                  new Lazy.D<Func.U<RealWorld, Short>>() {
                                    public Func.U<RealWorld, Short> call() {
                                      return Prelude.putStrLn(η$18625.call());
                                    }
                                  }
                                );
                      }
                    },
                    Thunk.<String/*<Character>*/>nested(
                          new Lazy.D<Lazy<String/*<Character>*/>>() {
                            public Lazy<String/*<Character>*/> call() {
                              return PreludeBase.<String/*<Character>*/, PreludeBase.TList<String/*<Character>*/>>$(
                                        new Func.U.D<PreludeBase.TList<String/*<Character>*/>, String/*<Character>*/>() {
                                          public Lazy<String/*<Character>*/> apply(
                                            final Lazy<PreludeBase.TList<String/*<Character>*/>> η$18628
                                          ) {
                                            return Thunk.<String/*<Character>*/>shared(
                                                      new Lazy.D<String/*<Character>*/>() {
                                                        public String/*<Character>*/ call() {
                                                          return PreludeList.IListMonoid_StringJ.<
                                                                Character
                                                              >concat(η$18628.call());
                                                        }
                                                      }
                                                    );
                                          }
                                        },
                                        Thunk.<PreludeBase.TList<String/*<Character>*/>>shared(
                                              new Lazy.D<PreludeBase.TList<String/*<Character>*/>>() {
                                                public PreludeBase.TList<String/*<Character>*/> call() {
                                                  return PreludeList.<String/*<Character>*/, PreludeBase.TList<Integer>>map(
                                                            new Func.U.D<PreludeBase.TList<Integer>, String/*<Character>*/>() {
                                                              public Lazy<String/*<Character>*/> apply(
                                                                final Lazy<PreludeBase.TList<
                                                                  Integer
                                                                >> η$18627
                                                              ) {
                                                                return Thunk.<String/*<Character>*/>shared(
                                                                          new Lazy.D<String/*
                                                                            <Character>
                                                                          */>() {
                                                                            public String/*
                                                                              <Character>
                                                                            */ call() {
                                                                              return EightPuzzle.showState8(
                                                                                        η$18627
                                                                                        .call()
                                                                                      );
                                                                            }
                                                                          }
                                                                        );
                                                              }
                                                            },
                                                            EightPuzzle.solution.call()
                                                          );
                                                }
                                              }
                                            )
                                      );
                            }
                          }
                        )
                  ).call();
        }
      }
    );

  public static void main(final java.lang.String[] argv) {
    
        PreludeBase.TST.<Short>performUnsafe($main
               .call()
          ).call();

  }
}
